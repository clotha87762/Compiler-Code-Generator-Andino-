	.file	"Blink.cpp"
	! ABI version
	.abi_2
	! This asm file is generated by compiler
	.flag	verbatim
	! This vector size directive is required for checking inconsistency on interrupt handler
	.vec_size	16
	! ------------------------------------
	! ISA family		: V3M
	! Pipeline model	: N8
	! Code model		: LARGE
	! Endian setting	: little-endian
	! Use SP floating-point instruction	: No
	! Use DP floating-point instruction	: No
	! ABI version		: ABI2
	! ------------------------------------
	! Use conditional move		: Yes
	! Use performance extension	: No
	! Use performance extension 2	: No
	! Use string extension		: No
	! ------------------------------------
	! V3PUSH instructions	: No
	! 16-bit instructions	: No
	! Reduced registers set	: Yes
	! ------------------------------------
	! Optimization level	: -O0
	! ------------------------------------
	! Cache block size	: 16
	! ------------------------------------
	.text
	.align	1
	.global	_Z5setupv
	.type	_Z5setupv, @function
_Z5setupv:
	! BEGIN PROLOGUE
	!     fp needed: 0
	!  pretend_args: 0
	!    local_size: 0
	! out_args_size: 0
	! registers ever_live: $r0, $r1, $ta, $lp, $sp, 
	! function attributes: None
	push.s	{ $lp }
	addi	$sp, $sp, -4
	! END PROLOGUE
	movi	$r0, 13
	movi	$r1, 1
	bal	pinMode
	! BEGIN EPILOGUE
	addi	$sp, $sp, 4
	pop.s	{ $lp }
	ret
	! END EPILOGUE
	.size	_Z5setupv, .-_Z5setupv
	.align	1
	.global	_Z4loopv
	.type	_Z4loopv, @function
_Z4loopv:
	! BEGIN PROLOGUE
	!     fp needed: 0
	!  pretend_args: 0
	!    local_size: 8
	! out_args_size: 0
	! registers ever_live: $r0, $r1, $ta, $lp, $sp, 
	! function attributes: None
	push.s	{ $lp }
	addi	$sp, $sp, -12
	! END PROLOGUE
 addi $sp, $sp, -76
 movi $r2, 3000
 swi $r2, [$sp+(0)]
 movi $r2, 3000
 swi $r2, [$sp+(4)]
 movi $r2, 1000
 swi $r2, [$sp+(8)]
 lwi $r2, [$sp+(0)]
 movi $r3, 3
 divsr $r0, $r1, $r2, $r3
 ori $r2, $r0, 0
 lwi $r3, [$sp+(4)]
 movi $r4, 3
 mul $r0, $r3, $r4
 ori $r3, $r0, 0
 add $r0, $r2, $r3
 ori $r2, $r0, 0
 lwi $r3, [$sp+(4)]
 sub $r0, $r2, $r3
 ori $r2, $r0, 0
 ori $r0, $r2, 0
 swi $r0, [$sp+(4)]
 movi $r2, 40
 movi $r3, 50
 mul $r0, $r2, $r3
 ori $r2, $r0, 0
 movi $r3, 30
 movi $r4, 70
 mul $r0, $r3, $r4
 ori $r3, $r0, 0
 movi $r4, 50
 movi $r0, 25
 swi $r0, [$sp+(12)]
 lwi $r1, [$sp+(12)]
 mul $r0, $r4, $r1
 ori $r4, $r0, 0
 movi $r0, 50
 swi $r0, [$sp+(16)]
 movi $r0, 50
 swi $r0, [$sp+(20)]
 lwi $r0, [$sp+(16)]
 lwi $r1, [$sp+(20)]
 mul $r0, $r0, $r1
 swi $r0, [$sp+(16)]
 movi $r0, 30
 swi $r0, [$sp+(24)]
 movi $r0, 30
 swi $r0, [$sp+(28)]
 lwi $r0, [$sp+(24)]
 lwi $r1, [$sp+(28)]
 mul $r0, $r0, $r1
 swi $r0, [$sp+(24)]
 lwi $r0, [$sp+(16)]
 lwi $r1, [$sp+(24)]
 divsr $r0, $r1, $r0, $r1
 swi $r0, [$sp+(16)]
 lwi $r1, [$sp+(16)]
 mul $r0, $r4, $r1
 ori $r4, $r0, 0
 divsr $r0, $r1, $r3, $r4
 ori $r3, $r0, 0
 add $r0, $r2, $r3
 ori $r2, $r0, 0
 ori $r0, $r2, 0
 swi $r0, [$sp+(0)]
 movi $r2, 13
 ori $r0, $r2, 0
 movi $r1, 0
 bal digitalWrite
 lwi $r2, [$sp+(0)]
 ori $r0, $r2, 0
 bal delay
 movi $r2, 13
 ori $r0, $r2, 0
 movi $r1, 1
 bal digitalWrite
 lwi $r2, [$sp+(4)]
 ori $r0, $r2, 0
 bal delay
 addi $sp, $sp, 76
	! BEGIN EPILOGUE
	addi	$sp, $sp, 12
	pop.s	{ $lp }
	ret
	! END EPILOGUE
	.size	_Z4loopv, .-_Z4loopv
	.ident	"GCC: (2015-08-24_nds32le-elf-mculib-v3m) 4.9.2"
	! ------------------------------------