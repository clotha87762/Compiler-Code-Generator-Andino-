   0  $accept : program $end

   1  program : first_func_def extdefs
   2          | extdefs_no_func first_func_def extdefs
   3          | first_func_def
   4          | extdefs_no_func first_func_def

   5  var : IDEN indexs
   6      | IDEN

   7  extdefs_no_func : extdefs_no_func extdef_no_func
   8                  | extdef_no_func

   9  extdef_no_func : type IDEN '(' para_in ')' ';'
  10                 | VOID IDEN '(' para_in ')' ';'
  11                 | type iden_list_init ';'
  12                 | CONST type const_iden_list ';'

  13  iden_list_init : iden_list_init ',' IDEN
  14                 | iden_list_init ',' IDEN init
  15                 | iden_list_init ',' IDEN indexs_dec array_init
  16                 | iden_list_init ',' IDEN indexs_dec
  17                 | IDEN init
  18                 | IDEN
  19                 | IDEN indexs_dec array_init
  20                 | IDEN indexs_dec

  21  const_iden_list : const_iden_list ',' IDEN const_init
  22                  | IDEN const_init

  23  const_init : '=' literal

  24  extdefs : extdefs extdef
  25          | extdef

  26  extdef : type IDEN '(' para_in ')' ';'
  27         | VOID IDEN '(' para_in ')' ';'
  28         | func_def
  29         | type iden_list_init ';'
  30         | CONST type const_iden_list ';'

  31  decs_x :
  32         | decs

  33  decs : decs dec
  34       | dec

  35  dec : type iden_list_init ';'
  36      | CONST type const_iden_list ';'

  37  expr_x :
  38         | expr

  39  expr : literal
  40       | var
  41       | var PLUSPLUS
  42       | var MINUSMINUS
  43       | IDEN '(' exprs_comma_x ')'
  44       | expr '+' expr
  45       | expr '-' expr
  46       | expr '*' expr
  47       | expr '/' expr
  48       | expr '%' expr
  49       | expr '>' expr
  50       | expr '<' expr
  51       | expr GE expr
  52       | expr LE expr
  53       | expr EQUAL expr
  54       | expr NOTEQUAL expr
  55       | NOT expr
  56       | expr ANDAND expr
  57       | expr OROR expr
  58       | '-' expr
  59       | '(' expr ')'

  60  expr_no_invoke : literal
  61                 | var
  62                 | var PLUSPLUS
  63                 | var MINUSMINUS
  64                 | expr_no_invoke '+' expr_no_invoke
  65                 | expr_no_invoke '-' expr_no_invoke
  66                 | expr_no_invoke '*' expr_no_invoke
  67                 | expr_no_invoke '/' expr_no_invoke
  68                 | expr_no_invoke '%' expr_no_invoke
  69                 | expr_no_invoke '>' expr_no_invoke
  70                 | expr_no_invoke '<' expr_no_invoke
  71                 | expr_no_invoke GE expr_no_invoke
  72                 | expr_no_invoke LE expr_no_invoke
  73                 | expr_no_invoke EQUAL expr_no_invoke
  74                 | expr_no_invoke NOTEQUAL expr_no_invoke
  75                 | NOT expr_no_invoke
  76                 | expr_no_invoke ANDAND expr_no_invoke
  77                 | expr_no_invoke OROR expr_no_invoke
  78                 | '-' expr_no_invoke
  79                 | '(' expr_no_invoke ')'

  80  stmts_switch_x :
  81                 | stmts_switch

  82  stmts_switch : stmts_switch stmt
  83               | stmt
  84               | stmts_switch BREAK ';'

  85  stmts_loop_x :
  86               | stmts_loop

  87  stmts_loop : stmts_loop stmt
  88             | stmt
  89             | stmts_loop BREAK ';'
  90             | stmts_loop CONTINUE ';'

  91  stmts_x :
  92          | stmts

  93  stmts : stmts stmt
  94        | stmt

  95  $$1 :

  96  stmt : var '=' $$1 expr ';'
  97       | blink
  98       | if_stmt
  99       | while_stmt
 100       | switch_stmt
 101       | for_stmt
 102       | IDEN '(' exprs_comma_x ')' ';'

 103  $$2 :

 104  $$3 :

 105  $$4 :

 106  if_stmt : IF $$2 '(' expr $$3 ')' $$4 else_x

 107  else_x : compound

 108  $$5 :

 109  else_x : compound ELSE $$5 compound

 110  $$6 :

 111  $$7 :

 112  while_stmt : WHILE '(' $$6 expr $$7 ')' loop_compound
 113             | DO loop_compound WHILE '(' expr ')' ';'

 114  for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' loop_compound

 115  switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}'

 116  cases : cases case
 117        | case

 118  case : CASE CHAR_LIT ':' stmts_switch_x
 119       | CASE INT_LIT ':' stmts_switch_x

 120  default_x :
 121            | DEFAULT ':' stmts_x

 122  first_func_def : type IDEN '(' para_in ')' nonvoid_compound
 123                 | VOID IDEN '(' para_in ')' compound

 124  func_def : type IDEN '(' para_in ')' nonvoid_compound
 125           | VOID IDEN '(' para_in ')' compound

 126  $$8 :

 127  nonvoid_compound : '{' $$8 decs_x stmts_x RETURN expr ';' '}'

 128  $$9 :

 129  compound : '{' $$9 decs_x stmts_x '}'

 130  $$10 :

 131  loop_compound : '{' $$10 decs_x stmts_loop_x '}'

 132  exprs_comma_x :
 133                | exprs_comma

 134  exprs_comma : exprs_comma ',' expr
 135              | expr

 136  exprs_comma_no_invoke_x :
 137                          | exprs_comma_no_invoke

 138  exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke
 139                        | expr_no_invoke

 140  $$11 :

 141  init : '=' $$11 expr

 142  array_init : '=' '{' exprs_comma_no_invoke_x '}'

 143  para_in :
 144          | paras

 145  paras : paras ',' para
 146        | para

 147  para : type IDEN indexs_dec
 148       | type IDEN

 149  indexs_dec : indexs_dec index_dec
 150             | index_dec

 151  index_dec : '[' INT_LIT ']'

 152  indexs : indexs index
 153         | index

 154  index : '[' expr ']'

 155  type : INT
 156       | DOUBLE
 157       | CHAR
 158       | BOOL

 159  literal : CHAR_LIT
 160          | INT_LIT
 161          | DOUBLE_LIT
 162          | BOOL_LIT
 163          | STRING_LIT

 164  $$12 :

 165  blink : DIGITAL_WRITE '(' $$12 expr ',' INT_LIT ')' ';'

 166  $$13 :

 167  blink : DELAY '(' $$13 expr ')' ';'

state 0
	$accept : . program $end  (0)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 5
	CONST  shift 6
	.  error

	program  goto 7
	type  goto 8
	first_func_def  goto 9
	extdefs_no_func  goto 10
	extdef_no_func  goto 11


state 1
	type : INT .  (155)

	.  reduce 155


state 2
	type : DOUBLE .  (156)

	.  reduce 156


state 3
	type : BOOL .  (158)

	.  reduce 158


state 4
	type : CHAR .  (157)

	.  reduce 157


state 5
	extdef_no_func : VOID . IDEN '(' para_in ')' ';'  (10)
	first_func_def : VOID . IDEN '(' para_in ')' compound  (123)

	IDEN  shift 12
	.  error


state 6
	extdef_no_func : CONST . type const_iden_list ';'  (12)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 13


state 7
	$accept : program . $end  (0)

	$end  accept


state 8
	extdef_no_func : type . IDEN '(' para_in ')' ';'  (9)
	extdef_no_func : type . iden_list_init ';'  (11)
	first_func_def : type . IDEN '(' para_in ')' nonvoid_compound  (122)

	IDEN  shift 14
	.  error

	iden_list_init  goto 15


state 9
	program : first_func_def . extdefs  (1)
	program : first_func_def .  (3)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 3

	type  goto 18
	extdefs  goto 19
	extdef  goto 20
	func_def  goto 21


state 10
	program : extdefs_no_func . first_func_def extdefs  (2)
	program : extdefs_no_func . first_func_def  (4)
	extdefs_no_func : extdefs_no_func . extdef_no_func  (7)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 5
	CONST  shift 6
	.  error

	type  goto 8
	first_func_def  goto 22
	extdef_no_func  goto 23


state 11
	extdefs_no_func : extdef_no_func .  (8)

	.  reduce 8


state 12
	extdef_no_func : VOID IDEN . '(' para_in ')' ';'  (10)
	first_func_def : VOID IDEN . '(' para_in ')' compound  (123)

	'('  shift 24
	.  error


state 13
	extdef_no_func : CONST type . const_iden_list ';'  (12)

	IDEN  shift 25
	.  error

	const_iden_list  goto 26


state 14
	extdef_no_func : type IDEN . '(' para_in ')' ';'  (9)
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)
	first_func_def : type IDEN . '(' para_in ')' nonvoid_compound  (122)

	'('  shift 27
	'='  shift 28
	'['  shift 29
	';'  reduce 18
	','  reduce 18

	init  goto 30
	indexs_dec  goto 31
	index_dec  goto 32


state 15
	extdef_no_func : type iden_list_init . ';'  (11)
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)

	';'  shift 33
	','  shift 34
	.  error


state 16
	extdef : VOID . IDEN '(' para_in ')' ';'  (27)
	func_def : VOID . IDEN '(' para_in ')' compound  (125)

	IDEN  shift 35
	.  error


state 17
	extdef : CONST . type const_iden_list ';'  (30)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 36


state 18
	extdef : type . IDEN '(' para_in ')' ';'  (26)
	extdef : type . iden_list_init ';'  (29)
	func_def : type . IDEN '(' para_in ')' nonvoid_compound  (124)

	IDEN  shift 37
	.  error

	iden_list_init  goto 38


state 19
	program : first_func_def extdefs .  (1)
	extdefs : extdefs . extdef  (24)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 1

	type  goto 18
	extdef  goto 39
	func_def  goto 21


state 20
	extdefs : extdef .  (25)

	.  reduce 25


state 21
	extdef : func_def .  (28)

	.  reduce 28


state 22
	program : extdefs_no_func first_func_def . extdefs  (2)
	program : extdefs_no_func first_func_def .  (4)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 4

	type  goto 18
	extdefs  goto 40
	extdef  goto 20
	func_def  goto 21


state 23
	extdefs_no_func : extdefs_no_func extdef_no_func .  (7)

	.  reduce 7


state 24
	extdef_no_func : VOID IDEN '(' . para_in ')' ';'  (10)
	first_func_def : VOID IDEN '(' . para_in ')' compound  (123)
	para_in : .  (143)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 143

	type  goto 41
	paras  goto 42
	para  goto 43
	para_in  goto 44


state 25
	const_iden_list : IDEN . const_init  (22)

	'='  shift 45
	.  error

	const_init  goto 46


state 26
	extdef_no_func : CONST type const_iden_list . ';'  (12)
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)

	';'  shift 47
	','  shift 48
	.  error


state 27
	extdef_no_func : type IDEN '(' . para_in ')' ';'  (9)
	first_func_def : type IDEN '(' . para_in ')' nonvoid_compound  (122)
	para_in : .  (143)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 143

	type  goto 41
	paras  goto 42
	para  goto 43
	para_in  goto 49


state 28
	init : '=' . $$11 expr  (141)
	$$11 : .  (140)

	.  reduce 140

	$$11  goto 50


state 29
	index_dec : '[' . INT_LIT ']'  (151)

	INT_LIT  shift 51
	.  error


state 30
	iden_list_init : IDEN init .  (17)

	.  reduce 17


state 31
	iden_list_init : IDEN indexs_dec . array_init  (19)
	iden_list_init : IDEN indexs_dec .  (20)
	indexs_dec : indexs_dec . index_dec  (149)

	'='  shift 52
	'['  shift 29
	';'  reduce 20
	','  reduce 20

	array_init  goto 53
	index_dec  goto 54


state 32
	indexs_dec : index_dec .  (150)

	.  reduce 150


state 33
	extdef_no_func : type iden_list_init ';' .  (11)

	.  reduce 11


state 34
	iden_list_init : iden_list_init ',' . IDEN  (13)
	iden_list_init : iden_list_init ',' . IDEN init  (14)
	iden_list_init : iden_list_init ',' . IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init ',' . IDEN indexs_dec  (16)

	IDEN  shift 55
	.  error


state 35
	extdef : VOID IDEN . '(' para_in ')' ';'  (27)
	func_def : VOID IDEN . '(' para_in ')' compound  (125)

	'('  shift 56
	.  error


state 36
	extdef : CONST type . const_iden_list ';'  (30)

	IDEN  shift 25
	.  error

	const_iden_list  goto 57


state 37
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)
	extdef : type IDEN . '(' para_in ')' ';'  (26)
	func_def : type IDEN . '(' para_in ')' nonvoid_compound  (124)

	'('  shift 58
	'='  shift 28
	'['  shift 29
	';'  reduce 18
	','  reduce 18

	init  goto 30
	indexs_dec  goto 31
	index_dec  goto 32


state 38
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)
	extdef : type iden_list_init . ';'  (29)

	';'  shift 59
	','  shift 34
	.  error


state 39
	extdefs : extdefs extdef .  (24)

	.  reduce 24


state 40
	program : extdefs_no_func first_func_def extdefs .  (2)
	extdefs : extdefs . extdef  (24)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 2

	type  goto 18
	extdef  goto 39
	func_def  goto 21


state 41
	para : type . IDEN indexs_dec  (147)
	para : type . IDEN  (148)

	IDEN  shift 60
	.  error


state 42
	para_in : paras .  (144)
	paras : paras . ',' para  (145)

	','  shift 61
	')'  reduce 144


state 43
	paras : para .  (146)

	.  reduce 146


state 44
	extdef_no_func : VOID IDEN '(' para_in . ')' ';'  (10)
	first_func_def : VOID IDEN '(' para_in . ')' compound  (123)

	')'  shift 62
	.  error


state 45
	const_init : '=' . literal  (23)

	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	.  error

	literal  goto 68


state 46
	const_iden_list : IDEN const_init .  (22)

	.  reduce 22


state 47
	extdef_no_func : CONST type const_iden_list ';' .  (12)

	.  reduce 12


state 48
	const_iden_list : const_iden_list ',' . IDEN const_init  (21)

	IDEN  shift 69
	.  error


state 49
	extdef_no_func : type IDEN '(' para_in . ')' ';'  (9)
	first_func_def : type IDEN '(' para_in . ')' nonvoid_compound  (122)

	')'  shift 70
	.  error


state 50
	init : '=' $$11 . expr  (141)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 76
	var  goto 77


state 51
	index_dec : '[' INT_LIT . ']'  (151)

	']'  shift 78
	.  error


state 52
	array_init : '=' . '{' exprs_comma_no_invoke_x '}'  (142)

	'{'  shift 79
	.  error


state 53
	iden_list_init : IDEN indexs_dec array_init .  (19)

	.  reduce 19


state 54
	indexs_dec : indexs_dec index_dec .  (149)

	.  reduce 149


state 55
	iden_list_init : iden_list_init ',' IDEN .  (13)
	iden_list_init : iden_list_init ',' IDEN . init  (14)
	iden_list_init : iden_list_init ',' IDEN . indexs_dec array_init  (15)
	iden_list_init : iden_list_init ',' IDEN . indexs_dec  (16)

	'='  shift 28
	'['  shift 29
	';'  reduce 13
	','  reduce 13

	init  goto 80
	indexs_dec  goto 81
	index_dec  goto 32


state 56
	extdef : VOID IDEN '(' . para_in ')' ';'  (27)
	func_def : VOID IDEN '(' . para_in ')' compound  (125)
	para_in : .  (143)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 143

	type  goto 41
	paras  goto 42
	para  goto 43
	para_in  goto 82


state 57
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)
	extdef : CONST type const_iden_list . ';'  (30)

	';'  shift 83
	','  shift 48
	.  error


state 58
	extdef : type IDEN '(' . para_in ')' ';'  (26)
	func_def : type IDEN '(' . para_in ')' nonvoid_compound  (124)
	para_in : .  (143)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 143

	type  goto 41
	paras  goto 42
	para  goto 43
	para_in  goto 84


state 59
	extdef : type iden_list_init ';' .  (29)

	.  reduce 29


state 60
	para : type IDEN . indexs_dec  (147)
	para : type IDEN .  (148)

	'['  shift 29
	')'  reduce 148
	','  reduce 148

	indexs_dec  goto 85
	index_dec  goto 32


state 61
	paras : paras ',' . para  (145)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 41
	para  goto 86


state 62
	extdef_no_func : VOID IDEN '(' para_in ')' . ';'  (10)
	first_func_def : VOID IDEN '(' para_in ')' . compound  (123)

	';'  shift 87
	'{'  shift 88
	.  error

	compound  goto 89


state 63
	literal : STRING_LIT .  (163)

	.  reduce 163


state 64
	literal : INT_LIT .  (160)

	.  reduce 160


state 65
	literal : BOOL_LIT .  (162)

	.  reduce 162


state 66
	literal : CHAR_LIT .  (159)

	.  reduce 159


state 67
	literal : DOUBLE_LIT .  (161)

	.  reduce 161


state 68
	const_init : '=' literal .  (23)

	.  reduce 23


state 69
	const_iden_list : const_iden_list ',' IDEN . const_init  (21)

	'='  shift 45
	.  error

	const_init  goto 90


state 70
	extdef_no_func : type IDEN '(' para_in ')' . ';'  (9)
	first_func_def : type IDEN '(' para_in ')' . nonvoid_compound  (122)

	';'  shift 91
	'{'  shift 92
	.  error

	nonvoid_compound  goto 93


state 71
	var : IDEN . indexs  (5)
	var : IDEN .  (6)
	expr : IDEN . '(' exprs_comma_x ')'  (43)

	'('  shift 94
	'['  shift 95
	PLUSPLUS  reduce 6
	MINUSMINUS  reduce 6
	ANDAND  reduce 6
	OROR  reduce 6
	GE  reduce 6
	LE  reduce 6
	EQUAL  reduce 6
	NOTEQUAL  reduce 6
	'>'  reduce 6
	'<'  reduce 6
	'+'  reduce 6
	'-'  reduce 6
	'*'  reduce 6
	'/'  reduce 6
	'%'  reduce 6
	')'  reduce 6
	';'  reduce 6
	','  reduce 6
	']'  reduce 6

	indexs  goto 96
	index  goto 97


state 72
	expr : NOT . expr  (55)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 98
	var  goto 77


state 73
	expr : '-' . expr  (58)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 99
	var  goto 77


state 74
	expr : '(' . expr ')'  (59)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 100
	var  goto 77


state 75
	expr : literal .  (39)

	.  reduce 39


state 76
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	init : '=' $$11 expr .  (141)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	';'  reduce 141
	','  reduce 141


state 77
	expr : var .  (40)
	expr : var . PLUSPLUS  (41)
	expr : var . MINUSMINUS  (42)

	PLUSPLUS  shift 114
	MINUSMINUS  shift 115
	ANDAND  reduce 40
	OROR  reduce 40
	GE  reduce 40
	LE  reduce 40
	EQUAL  reduce 40
	NOTEQUAL  reduce 40
	'>'  reduce 40
	'<'  reduce 40
	'+'  reduce 40
	'-'  reduce 40
	'*'  reduce 40
	'/'  reduce 40
	'%'  reduce 40
	')'  reduce 40
	';'  reduce 40
	','  reduce 40
	']'  reduce 40


state 78
	index_dec : '[' INT_LIT ']' .  (151)

	.  reduce 151


state 79
	array_init : '=' '{' . exprs_comma_no_invoke_x '}'  (142)
	exprs_comma_no_invoke_x : .  (136)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	'}'  reduce 136

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 122
	exprs_comma_no_invoke_x  goto 123
	exprs_comma_no_invoke  goto 124


state 80
	iden_list_init : iden_list_init ',' IDEN init .  (14)

	.  reduce 14


state 81
	iden_list_init : iden_list_init ',' IDEN indexs_dec . array_init  (15)
	iden_list_init : iden_list_init ',' IDEN indexs_dec .  (16)
	indexs_dec : indexs_dec . index_dec  (149)

	'='  shift 52
	'['  shift 29
	';'  reduce 16
	','  reduce 16

	array_init  goto 125
	index_dec  goto 54


state 82
	extdef : VOID IDEN '(' para_in . ')' ';'  (27)
	func_def : VOID IDEN '(' para_in . ')' compound  (125)

	')'  shift 126
	.  error


state 83
	extdef : CONST type const_iden_list ';' .  (30)

	.  reduce 30


state 84
	extdef : type IDEN '(' para_in . ')' ';'  (26)
	func_def : type IDEN '(' para_in . ')' nonvoid_compound  (124)

	')'  shift 127
	.  error


state 85
	para : type IDEN indexs_dec .  (147)
	indexs_dec : indexs_dec . index_dec  (149)

	'['  shift 29
	')'  reduce 147
	','  reduce 147

	index_dec  goto 54


state 86
	paras : paras ',' para .  (145)

	.  reduce 145


state 87
	extdef_no_func : VOID IDEN '(' para_in ')' ';' .  (10)

	.  reduce 10


state 88
	compound : '{' . $$9 decs_x stmts_x '}'  (129)
	$$9 : .  (128)

	.  reduce 128

	$$9  goto 128


state 89
	first_func_def : VOID IDEN '(' para_in ')' compound .  (123)

	.  reduce 123


state 90
	const_iden_list : const_iden_list ',' IDEN const_init .  (21)

	.  reduce 21


state 91
	extdef_no_func : type IDEN '(' para_in ')' ';' .  (9)

	.  reduce 9


state 92
	nonvoid_compound : '{' . $$8 decs_x stmts_x RETURN expr ';' '}'  (127)
	$$8 : .  (126)

	.  reduce 126

	$$8  goto 129


state 93
	first_func_def : type IDEN '(' para_in ')' nonvoid_compound .  (122)

	.  reduce 122


state 94
	expr : IDEN '(' . exprs_comma_x ')'  (43)
	exprs_comma_x : .  (132)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	')'  reduce 132

	literal  goto 75
	expr  goto 130
	var  goto 77
	exprs_comma_x  goto 131
	exprs_comma  goto 132


state 95
	index : '[' . expr ']'  (154)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 133
	var  goto 77


state 96
	var : IDEN indexs .  (5)
	indexs : indexs . index  (152)

	'['  shift 95
	PLUSPLUS  reduce 5
	MINUSMINUS  reduce 5
	ANDAND  reduce 5
	OROR  reduce 5
	GE  reduce 5
	LE  reduce 5
	EQUAL  reduce 5
	NOTEQUAL  reduce 5
	'>'  reduce 5
	'<'  reduce 5
	'+'  reduce 5
	'-'  reduce 5
	'*'  reduce 5
	'/'  reduce 5
	'%'  reduce 5
	')'  reduce 5
	';'  reduce 5
	','  reduce 5
	'='  reduce 5
	'}'  reduce 5
	']'  reduce 5

	index  goto 134


state 97
	indexs : index .  (153)

	.  reduce 153


state 98
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : NOT expr .  (55)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 55
	OROR  reduce 55
	')'  reduce 55
	';'  reduce 55
	','  reduce 55
	']'  reduce 55


state 99
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : '-' expr .  (58)

	.  reduce 58


state 100
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : '(' expr . ')'  (59)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  shift 135
	.  error


state 101
	expr : expr ANDAND . expr  (56)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 136
	var  goto 77


state 102
	expr : expr OROR . expr  (57)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 137
	var  goto 77


state 103
	expr : expr GE . expr  (51)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 138
	var  goto 77


state 104
	expr : expr LE . expr  (52)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 139
	var  goto 77


state 105
	expr : expr EQUAL . expr  (53)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 140
	var  goto 77


state 106
	expr : expr NOTEQUAL . expr  (54)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 141
	var  goto 77


state 107
	expr : expr '>' . expr  (49)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 142
	var  goto 77


state 108
	expr : expr '<' . expr  (50)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 143
	var  goto 77


state 109
	expr : expr '+' . expr  (44)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 144
	var  goto 77


state 110
	expr : expr '-' . expr  (45)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 145
	var  goto 77


state 111
	expr : expr '*' . expr  (46)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 146
	var  goto 77


state 112
	expr : expr '/' . expr  (47)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 147
	var  goto 77


state 113
	expr : expr '%' . expr  (48)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 148
	var  goto 77


state 114
	expr : var PLUSPLUS .  (41)

	.  reduce 41


state 115
	expr : var MINUSMINUS .  (42)

	.  reduce 42


state 116
	var : IDEN . indexs  (5)
	var : IDEN .  (6)

	'['  shift 95
	PLUSPLUS  reduce 6
	MINUSMINUS  reduce 6
	ANDAND  reduce 6
	OROR  reduce 6
	GE  reduce 6
	LE  reduce 6
	EQUAL  reduce 6
	NOTEQUAL  reduce 6
	'>'  reduce 6
	'<'  reduce 6
	'+'  reduce 6
	'-'  reduce 6
	'*'  reduce 6
	'/'  reduce 6
	'%'  reduce 6
	')'  reduce 6
	','  reduce 6
	'}'  reduce 6

	indexs  goto 96
	index  goto 97


state 117
	expr_no_invoke : NOT . expr_no_invoke  (75)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 149


state 118
	expr_no_invoke : '-' . expr_no_invoke  (78)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 150


state 119
	expr_no_invoke : '(' . expr_no_invoke ')'  (79)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 151


state 120
	expr_no_invoke : literal .  (60)

	.  reduce 60


state 121
	expr_no_invoke : var .  (61)
	expr_no_invoke : var . PLUSPLUS  (62)
	expr_no_invoke : var . MINUSMINUS  (63)

	PLUSPLUS  shift 152
	MINUSMINUS  shift 153
	ANDAND  reduce 61
	OROR  reduce 61
	GE  reduce 61
	LE  reduce 61
	EQUAL  reduce 61
	NOTEQUAL  reduce 61
	'>'  reduce 61
	'<'  reduce 61
	'+'  reduce 61
	'-'  reduce 61
	'*'  reduce 61
	'/'  reduce 61
	'%'  reduce 61
	')'  reduce 61
	','  reduce 61
	'}'  reduce 61


state 122
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	exprs_comma_no_invoke : expr_no_invoke .  (139)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	','  reduce 139
	'}'  reduce 139


state 123
	array_init : '=' '{' exprs_comma_no_invoke_x . '}'  (142)

	'}'  shift 167
	.  error


state 124
	exprs_comma_no_invoke_x : exprs_comma_no_invoke .  (137)
	exprs_comma_no_invoke : exprs_comma_no_invoke . ',' expr_no_invoke  (138)

	','  shift 168
	'}'  reduce 137


state 125
	iden_list_init : iden_list_init ',' IDEN indexs_dec array_init .  (15)

	.  reduce 15


state 126
	extdef : VOID IDEN '(' para_in ')' . ';'  (27)
	func_def : VOID IDEN '(' para_in ')' . compound  (125)

	';'  shift 169
	'{'  shift 88
	.  error

	compound  goto 170


state 127
	extdef : type IDEN '(' para_in ')' . ';'  (26)
	func_def : type IDEN '(' para_in ')' . nonvoid_compound  (124)

	';'  shift 171
	'{'  shift 92
	.  error

	nonvoid_compound  goto 172


state 128
	compound : '{' $$9 . decs_x stmts_x '}'  (129)
	decs_x : .  (31)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 173
	IDEN  reduce 31
	SWITCH  reduce 31
	IF  reduce 31
	FOR  reduce 31
	WHILE  reduce 31
	DO  reduce 31
	DIGITAL_WRITE  reduce 31
	DELAY  reduce 31
	'}'  reduce 31

	type  goto 174
	decs_x  goto 175
	decs  goto 176
	dec  goto 177


state 129
	nonvoid_compound : '{' $$8 . decs_x stmts_x RETURN expr ';' '}'  (127)
	decs_x : .  (31)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 173
	IDEN  reduce 31
	SWITCH  reduce 31
	IF  reduce 31
	FOR  reduce 31
	WHILE  reduce 31
	DO  reduce 31
	RETURN  reduce 31
	DIGITAL_WRITE  reduce 31
	DELAY  reduce 31

	type  goto 174
	decs_x  goto 178
	decs  goto 176
	dec  goto 177


state 130
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	exprs_comma : expr .  (135)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  reduce 135
	','  reduce 135


state 131
	expr : IDEN '(' exprs_comma_x . ')'  (43)

	')'  shift 179
	.  error


state 132
	exprs_comma_x : exprs_comma .  (133)
	exprs_comma : exprs_comma . ',' expr  (134)

	','  shift 180
	')'  reduce 133


state 133
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	index : '[' expr . ']'  (154)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	']'  shift 181
	.  error


state 134
	indexs : indexs index .  (152)

	.  reduce 152


state 135
	expr : '(' expr ')' .  (59)

	.  reduce 59


state 136
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr ANDAND expr .  (56)
	expr : expr . OROR expr  (57)

	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 56
	OROR  reduce 56
	')'  reduce 56
	';'  reduce 56
	','  reduce 56
	']'  reduce 56


state 137
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : expr OROR expr .  (57)

	ANDAND  shift 101
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	OROR  reduce 57
	')'  reduce 57
	';'  reduce 57
	','  reduce 57
	']'  reduce 57


state 138
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr GE expr .  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 51
	OROR  reduce 51
	GE  reduce 51
	LE  reduce 51
	EQUAL  reduce 51
	NOTEQUAL  reduce 51
	'>'  reduce 51
	'<'  reduce 51
	')'  reduce 51
	';'  reduce 51
	','  reduce 51
	']'  reduce 51


state 139
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr LE expr .  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 52
	OROR  reduce 52
	GE  reduce 52
	LE  reduce 52
	EQUAL  reduce 52
	NOTEQUAL  reduce 52
	'>'  reduce 52
	'<'  reduce 52
	')'  reduce 52
	';'  reduce 52
	','  reduce 52
	']'  reduce 52


state 140
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr EQUAL expr .  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 53
	OROR  reduce 53
	GE  reduce 53
	LE  reduce 53
	EQUAL  reduce 53
	NOTEQUAL  reduce 53
	'>'  reduce 53
	'<'  reduce 53
	')'  reduce 53
	';'  reduce 53
	','  reduce 53
	']'  reduce 53


state 141
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr NOTEQUAL expr .  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 54
	OROR  reduce 54
	GE  reduce 54
	LE  reduce 54
	EQUAL  reduce 54
	NOTEQUAL  reduce 54
	'>'  reduce 54
	'<'  reduce 54
	')'  reduce 54
	';'  reduce 54
	','  reduce 54
	']'  reduce 54


state 142
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr '>' expr .  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 49
	OROR  reduce 49
	GE  reduce 49
	LE  reduce 49
	EQUAL  reduce 49
	NOTEQUAL  reduce 49
	'>'  reduce 49
	'<'  reduce 49
	')'  reduce 49
	';'  reduce 49
	','  reduce 49
	']'  reduce 49


state 143
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr '<' expr .  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 50
	OROR  reduce 50
	GE  reduce 50
	LE  reduce 50
	EQUAL  reduce 50
	NOTEQUAL  reduce 50
	'>'  reduce 50
	'<'  reduce 50
	')'  reduce 50
	';'  reduce 50
	','  reduce 50
	']'  reduce 50


state 144
	expr : expr . '+' expr  (44)
	expr : expr '+' expr .  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 44
	OROR  reduce 44
	GE  reduce 44
	LE  reduce 44
	EQUAL  reduce 44
	NOTEQUAL  reduce 44
	'>'  reduce 44
	'<'  reduce 44
	'+'  reduce 44
	'-'  reduce 44
	')'  reduce 44
	';'  reduce 44
	','  reduce 44
	']'  reduce 44


state 145
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr '-' expr .  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	ANDAND  reduce 45
	OROR  reduce 45
	GE  reduce 45
	LE  reduce 45
	EQUAL  reduce 45
	NOTEQUAL  reduce 45
	'>'  reduce 45
	'<'  reduce 45
	'+'  reduce 45
	'-'  reduce 45
	')'  reduce 45
	';'  reduce 45
	','  reduce 45
	']'  reduce 45


state 146
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr '*' expr .  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 46


state 147
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr '/' expr .  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 47


state 148
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr '%' expr .  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 48


state 149
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : NOT expr_no_invoke .  (75)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 75
	OROR  reduce 75
	')'  reduce 75
	','  reduce 75
	'}'  reduce 75


state 150
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : '-' expr_no_invoke .  (78)

	.  reduce 78


state 151
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : '(' expr_no_invoke . ')'  (79)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  shift 182
	.  error


state 152
	expr_no_invoke : var PLUSPLUS .  (62)

	.  reduce 62


state 153
	expr_no_invoke : var MINUSMINUS .  (63)

	.  reduce 63


state 154
	expr_no_invoke : expr_no_invoke ANDAND . expr_no_invoke  (76)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 183


state 155
	expr_no_invoke : expr_no_invoke OROR . expr_no_invoke  (77)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 184


state 156
	expr_no_invoke : expr_no_invoke GE . expr_no_invoke  (71)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 185


state 157
	expr_no_invoke : expr_no_invoke LE . expr_no_invoke  (72)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 186


state 158
	expr_no_invoke : expr_no_invoke EQUAL . expr_no_invoke  (73)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 187


state 159
	expr_no_invoke : expr_no_invoke NOTEQUAL . expr_no_invoke  (74)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 188


state 160
	expr_no_invoke : expr_no_invoke '>' . expr_no_invoke  (69)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 189


state 161
	expr_no_invoke : expr_no_invoke '<' . expr_no_invoke  (70)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 190


state 162
	expr_no_invoke : expr_no_invoke '+' . expr_no_invoke  (64)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 191


state 163
	expr_no_invoke : expr_no_invoke '-' . expr_no_invoke  (65)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 192


state 164
	expr_no_invoke : expr_no_invoke '*' . expr_no_invoke  (66)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 193


state 165
	expr_no_invoke : expr_no_invoke '/' . expr_no_invoke  (67)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 194


state 166
	expr_no_invoke : expr_no_invoke '%' . expr_no_invoke  (68)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 195


state 167
	array_init : '=' '{' exprs_comma_no_invoke_x '}' .  (142)

	.  reduce 142


state 168
	exprs_comma_no_invoke : exprs_comma_no_invoke ',' . expr_no_invoke  (138)

	IDEN  shift 116
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 117
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 118
	'('  shift 119
	.  error

	literal  goto 120
	var  goto 121
	expr_no_invoke  goto 196


state 169
	extdef : VOID IDEN '(' para_in ')' ';' .  (27)

	.  reduce 27


state 170
	func_def : VOID IDEN '(' para_in ')' compound .  (125)

	.  reduce 125


state 171
	extdef : type IDEN '(' para_in ')' ';' .  (26)

	.  reduce 26


state 172
	func_def : type IDEN '(' para_in ')' nonvoid_compound .  (124)

	.  reduce 124


state 173
	dec : CONST . type const_iden_list ';'  (36)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 197


state 174
	dec : type . iden_list_init ';'  (35)

	IDEN  shift 198
	.  error

	iden_list_init  goto 199


state 175
	compound : '{' $$9 decs_x . stmts_x '}'  (129)
	stmts_x : .  (91)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	'}'  reduce 91

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 212
	stmts_x  goto 213
	stmts  goto 214
	switch_stmt  goto 215
	for_stmt  goto 216


state 176
	decs_x : decs .  (32)
	decs : decs . dec  (33)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 173
	IDEN  reduce 32
	SWITCH  reduce 32
	IF  reduce 32
	FOR  reduce 32
	WHILE  reduce 32
	DO  reduce 32
	RETURN  reduce 32
	DIGITAL_WRITE  reduce 32
	DELAY  reduce 32
	'}'  reduce 32

	type  goto 174
	dec  goto 217


state 177
	decs : dec .  (34)

	.  reduce 34


state 178
	nonvoid_compound : '{' $$8 decs_x . stmts_x RETURN expr ';' '}'  (127)
	stmts_x : .  (91)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	RETURN  reduce 91

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 212
	stmts_x  goto 218
	stmts  goto 214
	switch_stmt  goto 215
	for_stmt  goto 216


state 179
	expr : IDEN '(' exprs_comma_x ')' .  (43)

	.  reduce 43


state 180
	exprs_comma : exprs_comma ',' . expr  (134)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 219
	var  goto 77


state 181
	index : '[' expr ']' .  (154)

	.  reduce 154


state 182
	expr_no_invoke : '(' expr_no_invoke ')' .  (79)

	.  reduce 79


state 183
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke ANDAND expr_no_invoke .  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 76
	OROR  reduce 76
	')'  reduce 76
	','  reduce 76
	'}'  reduce 76


state 184
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : expr_no_invoke OROR expr_no_invoke .  (77)

	ANDAND  shift 154
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	OROR  reduce 77
	')'  reduce 77
	','  reduce 77
	'}'  reduce 77


state 185
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke GE expr_no_invoke .  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 71
	OROR  reduce 71
	GE  reduce 71
	LE  reduce 71
	EQUAL  reduce 71
	NOTEQUAL  reduce 71
	'>'  reduce 71
	'<'  reduce 71
	')'  reduce 71
	','  reduce 71
	'}'  reduce 71


state 186
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke LE expr_no_invoke .  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 72
	OROR  reduce 72
	GE  reduce 72
	LE  reduce 72
	EQUAL  reduce 72
	NOTEQUAL  reduce 72
	'>'  reduce 72
	'<'  reduce 72
	')'  reduce 72
	','  reduce 72
	'}'  reduce 72


state 187
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke EQUAL expr_no_invoke .  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 73
	OROR  reduce 73
	GE  reduce 73
	LE  reduce 73
	EQUAL  reduce 73
	NOTEQUAL  reduce 73
	'>'  reduce 73
	'<'  reduce 73
	')'  reduce 73
	','  reduce 73
	'}'  reduce 73


state 188
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke NOTEQUAL expr_no_invoke .  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 74
	OROR  reduce 74
	GE  reduce 74
	LE  reduce 74
	EQUAL  reduce 74
	NOTEQUAL  reduce 74
	'>'  reduce 74
	'<'  reduce 74
	')'  reduce 74
	','  reduce 74
	'}'  reduce 74


state 189
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke '>' expr_no_invoke .  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 69
	OROR  reduce 69
	GE  reduce 69
	LE  reduce 69
	EQUAL  reduce 69
	NOTEQUAL  reduce 69
	'>'  reduce 69
	'<'  reduce 69
	')'  reduce 69
	','  reduce 69
	'}'  reduce 69


state 190
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke '<' expr_no_invoke .  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 70
	OROR  reduce 70
	GE  reduce 70
	LE  reduce 70
	EQUAL  reduce 70
	NOTEQUAL  reduce 70
	'>'  reduce 70
	'<'  reduce 70
	')'  reduce 70
	','  reduce 70
	'}'  reduce 70


state 191
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke '+' expr_no_invoke .  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 64
	OROR  reduce 64
	GE  reduce 64
	LE  reduce 64
	EQUAL  reduce 64
	NOTEQUAL  reduce 64
	'>'  reduce 64
	'<'  reduce 64
	'+'  reduce 64
	'-'  reduce 64
	')'  reduce 64
	','  reduce 64
	'}'  reduce 64


state 192
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke '-' expr_no_invoke .  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 65
	OROR  reduce 65
	GE  reduce 65
	LE  reduce 65
	EQUAL  reduce 65
	NOTEQUAL  reduce 65
	'>'  reduce 65
	'<'  reduce 65
	'+'  reduce 65
	'-'  reduce 65
	')'  reduce 65
	','  reduce 65
	'}'  reduce 65


state 193
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke '*' expr_no_invoke .  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 66


state 194
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke '/' expr_no_invoke .  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 67


state 195
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke '%' expr_no_invoke .  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 68


state 196
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke .  (138)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	','  reduce 138
	'}'  reduce 138


state 197
	dec : CONST type . const_iden_list ';'  (36)

	IDEN  shift 25
	.  error

	const_iden_list  goto 220


state 198
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)

	'='  shift 28
	'['  shift 29
	';'  reduce 18
	','  reduce 18

	init  goto 30
	indexs_dec  goto 31
	index_dec  goto 32


state 199
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)
	dec : type iden_list_init . ';'  (35)

	';'  shift 221
	','  shift 34
	.  error


state 200
	var : IDEN . indexs  (5)
	var : IDEN .  (6)
	stmt : IDEN . '(' exprs_comma_x ')' ';'  (102)

	'('  shift 222
	'['  shift 95
	'='  reduce 6

	indexs  goto 96
	index  goto 97


state 201
	switch_stmt : SWITCH . '(' IDEN ')' '{' cases default_x '}'  (115)

	'('  shift 223
	.  error


state 202
	if_stmt : IF . $$2 '(' expr $$3 ')' $$4 else_x  (106)
	$$2 : .  (103)

	.  reduce 103

	$$2  goto 224


state 203
	for_stmt : FOR . '(' expr_x ';' expr_x ';' expr_x ')' loop_compound  (114)

	'('  shift 225
	.  error


state 204
	while_stmt : WHILE . '(' $$6 expr $$7 ')' loop_compound  (112)

	'('  shift 226
	.  error


state 205
	while_stmt : DO . loop_compound WHILE '(' expr ')' ';'  (113)

	'{'  shift 227
	.  error

	loop_compound  goto 228


state 206
	blink : DIGITAL_WRITE . '(' $$12 expr ',' INT_LIT ')' ';'  (165)

	'('  shift 229
	.  error


state 207
	blink : DELAY . '(' $$13 expr ')' ';'  (167)

	'('  shift 230
	.  error


state 208
	stmt : var . '=' $$1 expr ';'  (96)

	'='  shift 231
	.  error


state 209
	stmt : blink .  (97)

	.  reduce 97


state 210
	stmt : while_stmt .  (99)

	.  reduce 99


state 211
	stmt : if_stmt .  (98)

	.  reduce 98


state 212
	stmts : stmt .  (94)

	.  reduce 94


state 213
	compound : '{' $$9 decs_x stmts_x . '}'  (129)

	'}'  shift 232
	.  error


state 214
	stmts_x : stmts .  (92)
	stmts : stmts . stmt  (93)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	RETURN  reduce 92
	'}'  reduce 92

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 233
	switch_stmt  goto 215
	for_stmt  goto 216


state 215
	stmt : switch_stmt .  (100)

	.  reduce 100


state 216
	stmt : for_stmt .  (101)

	.  reduce 101


state 217
	decs : decs dec .  (33)

	.  reduce 33


state 218
	nonvoid_compound : '{' $$8 decs_x stmts_x . RETURN expr ';' '}'  (127)

	RETURN  shift 234
	.  error


state 219
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	exprs_comma : exprs_comma ',' expr .  (134)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  reduce 134
	','  reduce 134


state 220
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)
	dec : CONST type const_iden_list . ';'  (36)

	';'  shift 235
	','  shift 48
	.  error


state 221
	dec : type iden_list_init ';' .  (35)

	.  reduce 35


state 222
	stmt : IDEN '(' . exprs_comma_x ')' ';'  (102)
	exprs_comma_x : .  (132)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	')'  reduce 132

	literal  goto 75
	expr  goto 130
	var  goto 77
	exprs_comma_x  goto 236
	exprs_comma  goto 132


state 223
	switch_stmt : SWITCH '(' . IDEN ')' '{' cases default_x '}'  (115)

	IDEN  shift 237
	.  error


state 224
	if_stmt : IF $$2 . '(' expr $$3 ')' $$4 else_x  (106)

	'('  shift 238
	.  error


state 225
	for_stmt : FOR '(' . expr_x ';' expr_x ';' expr_x ')' loop_compound  (114)
	expr_x : .  (37)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	';'  reduce 37

	literal  goto 75
	expr  goto 239
	var  goto 77
	expr_x  goto 240


state 226
	while_stmt : WHILE '(' . $$6 expr $$7 ')' loop_compound  (112)
	$$6 : .  (110)

	.  reduce 110

	$$6  goto 241


state 227
	loop_compound : '{' . $$10 decs_x stmts_loop_x '}'  (131)
	$$10 : .  (130)

	.  reduce 130

	$$10  goto 242


state 228
	while_stmt : DO loop_compound . WHILE '(' expr ')' ';'  (113)

	WHILE  shift 243
	.  error


state 229
	blink : DIGITAL_WRITE '(' . $$12 expr ',' INT_LIT ')' ';'  (165)
	$$12 : .  (164)

	.  reduce 164

	$$12  goto 244


state 230
	blink : DELAY '(' . $$13 expr ')' ';'  (167)
	$$13 : .  (166)

	.  reduce 166

	$$13  goto 245


state 231
	stmt : var '=' . $$1 expr ';'  (96)
	$$1 : .  (95)

	.  reduce 95

	$$1  goto 246


state 232
	compound : '{' $$9 decs_x stmts_x '}' .  (129)

	.  reduce 129


state 233
	stmts : stmts stmt .  (93)

	.  reduce 93


state 234
	nonvoid_compound : '{' $$8 decs_x stmts_x RETURN . expr ';' '}'  (127)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 247
	var  goto 77


state 235
	dec : CONST type const_iden_list ';' .  (36)

	.  reduce 36


state 236
	stmt : IDEN '(' exprs_comma_x . ')' ';'  (102)

	')'  shift 248
	.  error


state 237
	switch_stmt : SWITCH '(' IDEN . ')' '{' cases default_x '}'  (115)

	')'  shift 249
	.  error


state 238
	if_stmt : IF $$2 '(' . expr $$3 ')' $$4 else_x  (106)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 250
	var  goto 77


state 239
	expr_x : expr .  (38)
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  reduce 38
	';'  reduce 38


state 240
	for_stmt : FOR '(' expr_x . ';' expr_x ';' expr_x ')' loop_compound  (114)

	';'  shift 251
	.  error


state 241
	while_stmt : WHILE '(' $$6 . expr $$7 ')' loop_compound  (112)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 252
	var  goto 77


state 242
	loop_compound : '{' $$10 . decs_x stmts_loop_x '}'  (131)
	decs_x : .  (31)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 173
	IDEN  reduce 31
	SWITCH  reduce 31
	IF  reduce 31
	FOR  reduce 31
	WHILE  reduce 31
	DO  reduce 31
	DIGITAL_WRITE  reduce 31
	DELAY  reduce 31
	'}'  reduce 31

	type  goto 174
	decs_x  goto 253
	decs  goto 176
	dec  goto 177


state 243
	while_stmt : DO loop_compound WHILE . '(' expr ')' ';'  (113)

	'('  shift 254
	.  error


state 244
	blink : DIGITAL_WRITE '(' $$12 . expr ',' INT_LIT ')' ';'  (165)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 255
	var  goto 77


state 245
	blink : DELAY '(' $$13 . expr ')' ';'  (167)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 256
	var  goto 77


state 246
	stmt : var '=' $$1 . expr ';'  (96)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 257
	var  goto 77


state 247
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	nonvoid_compound : '{' $$8 decs_x stmts_x RETURN expr . ';' '}'  (127)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	';'  shift 258
	.  error


state 248
	stmt : IDEN '(' exprs_comma_x ')' . ';'  (102)

	';'  shift 259
	.  error


state 249
	switch_stmt : SWITCH '(' IDEN ')' . '{' cases default_x '}'  (115)

	'{'  shift 260
	.  error


state 250
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	if_stmt : IF $$2 '(' expr . $$3 ')' $$4 else_x  (106)
	$$3 : .  (104)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  reduce 104

	$$3  goto 261


state 251
	for_stmt : FOR '(' expr_x ';' . expr_x ';' expr_x ')' loop_compound  (114)
	expr_x : .  (37)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	';'  reduce 37

	literal  goto 75
	expr  goto 239
	var  goto 77
	expr_x  goto 262


state 252
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	while_stmt : WHILE '(' $$6 expr . $$7 ')' loop_compound  (112)
	$$7 : .  (111)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  reduce 111

	$$7  goto 263


state 253
	loop_compound : '{' $$10 decs_x . stmts_loop_x '}'  (131)
	stmts_loop_x : .  (85)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	'}'  reduce 85

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 264
	stmts_loop_x  goto 265
	stmts_loop  goto 266
	switch_stmt  goto 215
	for_stmt  goto 216


state 254
	while_stmt : DO loop_compound WHILE '(' . expr ')' ';'  (113)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 267
	var  goto 77


state 255
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	blink : DIGITAL_WRITE '(' $$12 expr . ',' INT_LIT ')' ';'  (165)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	','  shift 268
	.  error


state 256
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	blink : DELAY '(' $$13 expr . ')' ';'  (167)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  shift 269
	.  error


state 257
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	stmt : var '=' $$1 expr . ';'  (96)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	';'  shift 270
	.  error


state 258
	nonvoid_compound : '{' $$8 decs_x stmts_x RETURN expr ';' . '}'  (127)

	'}'  shift 271
	.  error


state 259
	stmt : IDEN '(' exprs_comma_x ')' ';' .  (102)

	.  reduce 102


state 260
	switch_stmt : SWITCH '(' IDEN ')' '{' . cases default_x '}'  (115)

	CASE  shift 272
	.  error

	cases  goto 273
	case  goto 274


state 261
	if_stmt : IF $$2 '(' expr $$3 . ')' $$4 else_x  (106)

	')'  shift 275
	.  error


state 262
	for_stmt : FOR '(' expr_x ';' expr_x . ';' expr_x ')' loop_compound  (114)

	';'  shift 276
	.  error


state 263
	while_stmt : WHILE '(' $$6 expr $$7 . ')' loop_compound  (112)

	')'  shift 277
	.  error


state 264
	stmts_loop : stmt .  (88)

	.  reduce 88


state 265
	loop_compound : '{' $$10 decs_x stmts_loop_x . '}'  (131)

	'}'  shift 278
	.  error


state 266
	stmts_loop_x : stmts_loop .  (86)
	stmts_loop : stmts_loop . stmt  (87)
	stmts_loop : stmts_loop . BREAK ';'  (89)
	stmts_loop : stmts_loop . CONTINUE ';'  (90)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	CONTINUE  shift 279
	BREAK  shift 280
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	'}'  reduce 86

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 281
	switch_stmt  goto 215
	for_stmt  goto 216


state 267
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	while_stmt : DO loop_compound WHILE '(' expr . ')' ';'  (113)

	ANDAND  shift 101
	OROR  shift 102
	GE  shift 103
	LE  shift 104
	EQUAL  shift 105
	NOTEQUAL  shift 106
	'>'  shift 107
	'<'  shift 108
	'+'  shift 109
	'-'  shift 110
	'*'  shift 111
	'/'  shift 112
	'%'  shift 113
	')'  shift 282
	.  error


state 268
	blink : DIGITAL_WRITE '(' $$12 expr ',' . INT_LIT ')' ';'  (165)

	INT_LIT  shift 283
	.  error


state 269
	blink : DELAY '(' $$13 expr ')' . ';'  (167)

	';'  shift 284
	.  error


state 270
	stmt : var '=' $$1 expr ';' .  (96)

	.  reduce 96


state 271
	nonvoid_compound : '{' $$8 decs_x stmts_x RETURN expr ';' '}' .  (127)

	.  reduce 127


state 272
	case : CASE . CHAR_LIT ':' stmts_switch_x  (118)
	case : CASE . INT_LIT ':' stmts_switch_x  (119)

	INT_LIT  shift 285
	CHAR_LIT  shift 286
	.  error


state 273
	switch_stmt : SWITCH '(' IDEN ')' '{' cases . default_x '}'  (115)
	cases : cases . case  (116)
	default_x : .  (120)

	CASE  shift 272
	DEFAULT  shift 287
	'}'  reduce 120

	default_x  goto 288
	case  goto 289


state 274
	cases : case .  (117)

	.  reduce 117


state 275
	if_stmt : IF $$2 '(' expr $$3 ')' . $$4 else_x  (106)
	$$4 : .  (105)

	.  reduce 105

	$$4  goto 290


state 276
	for_stmt : FOR '(' expr_x ';' expr_x ';' . expr_x ')' loop_compound  (114)
	expr_x : .  (37)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	')'  reduce 37

	literal  goto 75
	expr  goto 239
	var  goto 77
	expr_x  goto 291


state 277
	while_stmt : WHILE '(' $$6 expr $$7 ')' . loop_compound  (112)

	'{'  shift 227
	.  error

	loop_compound  goto 292


state 278
	loop_compound : '{' $$10 decs_x stmts_loop_x '}' .  (131)

	.  reduce 131


state 279
	stmts_loop : stmts_loop CONTINUE . ';'  (90)

	';'  shift 293
	.  error


state 280
	stmts_loop : stmts_loop BREAK . ';'  (89)

	';'  shift 294
	.  error


state 281
	stmts_loop : stmts_loop stmt .  (87)

	.  reduce 87


state 282
	while_stmt : DO loop_compound WHILE '(' expr ')' . ';'  (113)

	';'  shift 295
	.  error


state 283
	blink : DIGITAL_WRITE '(' $$12 expr ',' INT_LIT . ')' ';'  (165)

	')'  shift 296
	.  error


state 284
	blink : DELAY '(' $$13 expr ')' ';' .  (167)

	.  reduce 167


state 285
	case : CASE INT_LIT . ':' stmts_switch_x  (119)

	':'  shift 297
	.  error


state 286
	case : CASE CHAR_LIT . ':' stmts_switch_x  (118)

	':'  shift 298
	.  error


state 287
	default_x : DEFAULT . ':' stmts_x  (121)

	':'  shift 299
	.  error


state 288
	switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x . '}'  (115)

	'}'  shift 300
	.  error


state 289
	cases : cases case .  (116)

	.  reduce 116


state 290
	if_stmt : IF $$2 '(' expr $$3 ')' $$4 . else_x  (106)

	'{'  shift 88
	.  error

	else_x  goto 301
	compound  goto 302


state 291
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x . ')' loop_compound  (114)

	')'  shift 303
	.  error


state 292
	while_stmt : WHILE '(' $$6 expr $$7 ')' loop_compound .  (112)

	.  reduce 112


state 293
	stmts_loop : stmts_loop CONTINUE ';' .  (90)

	.  reduce 90


state 294
	stmts_loop : stmts_loop BREAK ';' .  (89)

	.  reduce 89


state 295
	while_stmt : DO loop_compound WHILE '(' expr ')' ';' .  (113)

	.  reduce 113


state 296
	blink : DIGITAL_WRITE '(' $$12 expr ',' INT_LIT ')' . ';'  (165)

	';'  shift 304
	.  error


state 297
	case : CASE INT_LIT ':' . stmts_switch_x  (119)
	stmts_switch_x : .  (80)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	CASE  reduce 80
	DEFAULT  reduce 80
	'}'  reduce 80

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmts_switch_x  goto 305
	stmts_switch  goto 306
	stmt  goto 307
	switch_stmt  goto 215
	for_stmt  goto 216


state 298
	case : CASE CHAR_LIT ':' . stmts_switch_x  (118)
	stmts_switch_x : .  (80)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	CASE  reduce 80
	DEFAULT  reduce 80
	'}'  reduce 80

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmts_switch_x  goto 308
	stmts_switch  goto 306
	stmt  goto 307
	switch_stmt  goto 215
	for_stmt  goto 216


state 299
	default_x : DEFAULT ':' . stmts_x  (121)
	stmts_x : .  (91)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	'}'  reduce 91

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 212
	stmts_x  goto 309
	stmts  goto 214
	switch_stmt  goto 215
	for_stmt  goto 216


state 300
	switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}' .  (115)

	.  reduce 115


state 301
	if_stmt : IF $$2 '(' expr $$3 ')' $$4 else_x .  (106)

	.  reduce 106


state 302
	else_x : compound .  (107)
	else_x : compound . ELSE $$5 compound  (109)

	ELSE  shift 310
	IDEN  reduce 107
	SWITCH  reduce 107
	CASE  reduce 107
	DEFAULT  reduce 107
	IF  reduce 107
	FOR  reduce 107
	WHILE  reduce 107
	DO  reduce 107
	RETURN  reduce 107
	CONTINUE  reduce 107
	BREAK  reduce 107
	DIGITAL_WRITE  reduce 107
	DELAY  reduce 107
	'}'  reduce 107


state 303
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' . loop_compound  (114)

	'{'  shift 227
	.  error

	loop_compound  goto 311


state 304
	blink : DIGITAL_WRITE '(' $$12 expr ',' INT_LIT ')' ';' .  (165)

	.  reduce 165


state 305
	case : CASE INT_LIT ':' stmts_switch_x .  (119)

	.  reduce 119


state 306
	stmts_switch_x : stmts_switch .  (81)
	stmts_switch : stmts_switch . stmt  (82)
	stmts_switch : stmts_switch . BREAK ';'  (84)

	IDEN  shift 200
	SWITCH  shift 201
	IF  shift 202
	FOR  shift 203
	WHILE  shift 204
	DO  shift 205
	BREAK  shift 312
	DIGITAL_WRITE  shift 206
	DELAY  shift 207
	CASE  reduce 81
	DEFAULT  reduce 81
	'}'  reduce 81

	var  goto 208
	blink  goto 209
	while_stmt  goto 210
	if_stmt  goto 211
	stmt  goto 313
	switch_stmt  goto 215
	for_stmt  goto 216


state 307
	stmts_switch : stmt .  (83)

	.  reduce 83


state 308
	case : CASE CHAR_LIT ':' stmts_switch_x .  (118)

	.  reduce 118


state 309
	default_x : DEFAULT ':' stmts_x .  (121)

	.  reduce 121


state 310
	else_x : compound ELSE . $$5 compound  (109)
	$$5 : .  (108)

	.  reduce 108

	$$5  goto 314


state 311
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' loop_compound .  (114)

	.  reduce 114


state 312
	stmts_switch : stmts_switch BREAK . ';'  (84)

	';'  shift 315
	.  error


state 313
	stmts_switch : stmts_switch stmt .  (82)

	.  reduce 82


state 314
	else_x : compound ELSE $$5 . compound  (109)

	'{'  shift 88
	.  error

	compound  goto 316


state 315
	stmts_switch : stmts_switch BREAK ';' .  (84)

	.  reduce 84


state 316
	else_x : compound ELSE $$5 compound .  (109)

	.  reduce 109


60 terminals, 65 nonterminals
168 grammar rules, 317 states
