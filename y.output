   0  $accept : program $end

   1  program : first_func_def extdefs
   2          | extdefs_no_func first_func_def extdefs
   3          | first_func_def
   4          | extdefs_no_func first_func_def

   5  var : IDEN indexs
   6      | IDEN

   7  extdefs_no_func : extdefs_no_func extdef_no_func
   8                  | extdef_no_func

   9  extdef_no_func : type IDEN '(' para_in ')' ';'
  10                 | VOID IDEN '(' para_in ')' ';'
  11                 | type iden_list_init ';'
  12                 | CONST type const_iden_list ';'

  13  iden_list_init : iden_list_init ',' IDEN
  14                 | iden_list_init ',' IDEN init
  15                 | iden_list_init ',' IDEN indexs_dec array_init
  16                 | iden_list_init ',' IDEN indexs_dec
  17                 | IDEN init
  18                 | IDEN
  19                 | IDEN indexs_dec array_init
  20                 | IDEN indexs_dec

  21  const_iden_list : const_iden_list ',' IDEN const_init
  22                  | IDEN const_init

  23  const_init : '=' literal

  24  extdefs : extdefs extdef
  25          | extdef

  26  extdef : type IDEN '(' para_in ')' ';'
  27         | VOID IDEN '(' para_in ')' ';'
  28         | func_def
  29         | type iden_list_init ';'
  30         | CONST type const_iden_list ';'

  31  decs_x :
  32         | decs

  33  decs : decs dec
  34       | dec

  35  dec : type iden_list_init ';'
  36      | CONST type const_iden_list ';'

  37  expr_x :
  38         | expr

  39  expr : literal
  40       | var
  41       | var PLUSPLUS
  42       | var MINUSMINUS
  43       | IDEN '(' exprs_comma_x ')'
  44       | expr '+' expr
  45       | expr '-' expr
  46       | expr '*' expr
  47       | expr '/' expr
  48       | expr '%' expr
  49       | expr '>' expr
  50       | expr '<' expr
  51       | expr GE expr
  52       | expr LE expr
  53       | expr EQUAL expr
  54       | expr NOTEQUAL expr
  55       | NOT expr
  56       | expr ANDAND expr
  57       | expr OROR expr
  58       | '-' expr
  59       | '(' expr ')'

  60  expr_no_invoke : literal
  61                 | var
  62                 | var PLUSPLUS
  63                 | var MINUSMINUS
  64                 | expr_no_invoke '+' expr_no_invoke
  65                 | expr_no_invoke '-' expr_no_invoke
  66                 | expr_no_invoke '*' expr_no_invoke
  67                 | expr_no_invoke '/' expr_no_invoke
  68                 | expr_no_invoke '%' expr_no_invoke
  69                 | expr_no_invoke '>' expr_no_invoke
  70                 | expr_no_invoke '<' expr_no_invoke
  71                 | expr_no_invoke GE expr_no_invoke
  72                 | expr_no_invoke LE expr_no_invoke
  73                 | expr_no_invoke EQUAL expr_no_invoke
  74                 | expr_no_invoke NOTEQUAL expr_no_invoke
  75                 | NOT expr_no_invoke
  76                 | expr_no_invoke ANDAND expr_no_invoke
  77                 | expr_no_invoke OROR expr_no_invoke
  78                 | '-' expr_no_invoke
  79                 | '(' expr_no_invoke ')'

  80  stmts_x :
  81          | stmts

  82  stmts : stmts stmt
  83        | stmt

  84  $$1 :

  85  stmt : var '=' $$1 expr ';'
  86       | blink
  87       | if_stmt
  88       | while_stmt
  89       | switch_stmt
  90       | for_stmt
  91       | IDEN '(' exprs_comma_x ')' ';'
  92       | RETURN expr ';'
  93       | BREAK ';'
  94       | CONTINUE ';'

  95  if_stmt : IF '(' expr ')' compound ELSE compound
  96          | IF '(' expr ')' compound

  97  while_stmt : WHILE '(' expr ')' compound
  98             | DO compound WHILE '(' expr ')' ';'

  99  for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' compound

 100  switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}'

 101  cases : cases case
 102        | case

 103  case : CASE CHAR_LIT ':' stmts_x
 104       | CASE INT_LIT ':' stmts_x

 105  default_x :
 106            | DEFAULT ':' stmts_x

 107  first_func_def : type IDEN '(' para_in ')' compound
 108                 | VOID IDEN '(' para_in ')' compound

 109  func_def : type IDEN '(' para_in ')' compound
 110           | VOID IDEN '(' para_in ')' compound

 111  compound : '{' decs_x stmts_x '}'

 112  exprs_comma_x :
 113                | exprs_comma

 114  exprs_comma : exprs_comma ',' expr
 115              | expr

 116  exprs_comma_no_invoke_x :
 117                          | exprs_comma_no_invoke

 118  exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke
 119                        | expr_no_invoke

 120  $$2 :

 121  init : '=' $$2 expr

 122  array_init : '=' '{' exprs_comma_no_invoke_x '}'

 123  para_in :
 124          | paras

 125  paras : paras ',' para
 126        | para

 127  para : type IDEN indexs_dec
 128       | type IDEN

 129  indexs_dec : indexs_dec index_dec
 130             | index_dec

 131  index_dec : '[' INT_LIT ']'

 132  indexs : indexs index
 133         | index

 134  index : '[' expr ']'

 135  type : INT
 136       | DOUBLE
 137       | CHAR
 138       | BOOL

 139  literal : CHAR_LIT
 140          | INT_LIT
 141          | DOUBLE_LIT
 142          | BOOL_LIT
 143          | STRING_LIT

 144  $$3 :

 145  blink : DIGITAL_WRITE '(' $$3 expr ',' lowhigh ')' ';'

 146  $$4 :

 147  blink : DELAY '(' $$4 expr ')' ';'

 148  lowhigh : LOW
 149          | HIGH

state 0
	$accept : . program $end  (0)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 5
	CONST  shift 6
	.  error

	program  goto 7
	type  goto 8
	first_func_def  goto 9
	extdefs_no_func  goto 10
	extdef_no_func  goto 11


state 1
	type : INT .  (135)

	.  reduce 135


state 2
	type : DOUBLE .  (136)

	.  reduce 136


state 3
	type : BOOL .  (138)

	.  reduce 138


state 4
	type : CHAR .  (137)

	.  reduce 137


state 5
	extdef_no_func : VOID . IDEN '(' para_in ')' ';'  (10)
	first_func_def : VOID . IDEN '(' para_in ')' compound  (108)

	IDEN  shift 12
	.  error


state 6
	extdef_no_func : CONST . type const_iden_list ';'  (12)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 13


state 7
	$accept : program . $end  (0)

	$end  accept


state 8
	extdef_no_func : type . IDEN '(' para_in ')' ';'  (9)
	extdef_no_func : type . iden_list_init ';'  (11)
	first_func_def : type . IDEN '(' para_in ')' compound  (107)

	IDEN  shift 14
	.  error

	iden_list_init  goto 15


state 9
	program : first_func_def . extdefs  (1)
	program : first_func_def .  (3)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 3

	type  goto 18
	extdefs  goto 19
	extdef  goto 20
	func_def  goto 21


state 10
	program : extdefs_no_func . first_func_def extdefs  (2)
	program : extdefs_no_func . first_func_def  (4)
	extdefs_no_func : extdefs_no_func . extdef_no_func  (7)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 5
	CONST  shift 6
	.  error

	type  goto 8
	first_func_def  goto 22
	extdef_no_func  goto 23


state 11
	extdefs_no_func : extdef_no_func .  (8)

	.  reduce 8


state 12
	extdef_no_func : VOID IDEN . '(' para_in ')' ';'  (10)
	first_func_def : VOID IDEN . '(' para_in ')' compound  (108)

	'('  shift 24
	.  error


state 13
	extdef_no_func : CONST type . const_iden_list ';'  (12)

	IDEN  shift 25
	.  error

	const_iden_list  goto 26


state 14
	extdef_no_func : type IDEN . '(' para_in ')' ';'  (9)
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)
	first_func_def : type IDEN . '(' para_in ')' compound  (107)

	'('  shift 27
	'='  shift 28
	'['  shift 29
	';'  reduce 18
	','  reduce 18

	init  goto 30
	indexs_dec  goto 31
	index_dec  goto 32


state 15
	extdef_no_func : type iden_list_init . ';'  (11)
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)

	';'  shift 33
	','  shift 34
	.  error


state 16
	extdef : VOID . IDEN '(' para_in ')' ';'  (27)
	func_def : VOID . IDEN '(' para_in ')' compound  (110)

	IDEN  shift 35
	.  error


state 17
	extdef : CONST . type const_iden_list ';'  (30)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 36


state 18
	extdef : type . IDEN '(' para_in ')' ';'  (26)
	extdef : type . iden_list_init ';'  (29)
	func_def : type . IDEN '(' para_in ')' compound  (109)

	IDEN  shift 37
	.  error

	iden_list_init  goto 38


state 19
	program : first_func_def extdefs .  (1)
	extdefs : extdefs . extdef  (24)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 1

	type  goto 18
	extdef  goto 39
	func_def  goto 21


state 20
	extdefs : extdef .  (25)

	.  reduce 25


state 21
	extdef : func_def .  (28)

	.  reduce 28


state 22
	program : extdefs_no_func first_func_def . extdefs  (2)
	program : extdefs_no_func first_func_def .  (4)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 4

	type  goto 18
	extdefs  goto 40
	extdef  goto 20
	func_def  goto 21


state 23
	extdefs_no_func : extdefs_no_func extdef_no_func .  (7)

	.  reduce 7


state 24
	extdef_no_func : VOID IDEN '(' . para_in ')' ';'  (10)
	first_func_def : VOID IDEN '(' . para_in ')' compound  (108)
	para_in : .  (123)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 123

	type  goto 41
	para_in  goto 42
	paras  goto 43
	para  goto 44


state 25
	const_iden_list : IDEN . const_init  (22)

	'='  shift 45
	.  error

	const_init  goto 46


state 26
	extdef_no_func : CONST type const_iden_list . ';'  (12)
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)

	';'  shift 47
	','  shift 48
	.  error


state 27
	extdef_no_func : type IDEN '(' . para_in ')' ';'  (9)
	first_func_def : type IDEN '(' . para_in ')' compound  (107)
	para_in : .  (123)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 123

	type  goto 41
	para_in  goto 49
	paras  goto 43
	para  goto 44


state 28
	init : '=' . $$2 expr  (121)
	$$2 : .  (120)

	.  reduce 120

	$$2  goto 50


state 29
	index_dec : '[' . INT_LIT ']'  (131)

	INT_LIT  shift 51
	.  error


state 30
	iden_list_init : IDEN init .  (17)

	.  reduce 17


state 31
	iden_list_init : IDEN indexs_dec . array_init  (19)
	iden_list_init : IDEN indexs_dec .  (20)
	indexs_dec : indexs_dec . index_dec  (129)

	'='  shift 52
	'['  shift 29
	';'  reduce 20
	','  reduce 20

	array_init  goto 53
	index_dec  goto 54


state 32
	indexs_dec : index_dec .  (130)

	.  reduce 130


state 33
	extdef_no_func : type iden_list_init ';' .  (11)

	.  reduce 11


state 34
	iden_list_init : iden_list_init ',' . IDEN  (13)
	iden_list_init : iden_list_init ',' . IDEN init  (14)
	iden_list_init : iden_list_init ',' . IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init ',' . IDEN indexs_dec  (16)

	IDEN  shift 55
	.  error


state 35
	extdef : VOID IDEN . '(' para_in ')' ';'  (27)
	func_def : VOID IDEN . '(' para_in ')' compound  (110)

	'('  shift 56
	.  error


state 36
	extdef : CONST type . const_iden_list ';'  (30)

	IDEN  shift 25
	.  error

	const_iden_list  goto 57


state 37
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)
	extdef : type IDEN . '(' para_in ')' ';'  (26)
	func_def : type IDEN . '(' para_in ')' compound  (109)

	'('  shift 58
	'='  shift 28
	'['  shift 29
	';'  reduce 18
	','  reduce 18

	init  goto 30
	indexs_dec  goto 31
	index_dec  goto 32


state 38
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)
	extdef : type iden_list_init . ';'  (29)

	';'  shift 59
	','  shift 34
	.  error


state 39
	extdefs : extdefs extdef .  (24)

	.  reduce 24


state 40
	program : extdefs_no_func first_func_def extdefs .  (2)
	extdefs : extdefs . extdef  (24)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 16
	CONST  shift 17
	$end  reduce 2

	type  goto 18
	extdef  goto 39
	func_def  goto 21


state 41
	para : type . IDEN indexs_dec  (127)
	para : type . IDEN  (128)

	IDEN  shift 60
	.  error


state 42
	extdef_no_func : VOID IDEN '(' para_in . ')' ';'  (10)
	first_func_def : VOID IDEN '(' para_in . ')' compound  (108)

	')'  shift 61
	.  error


state 43
	para_in : paras .  (124)
	paras : paras . ',' para  (125)

	','  shift 62
	')'  reduce 124


state 44
	paras : para .  (126)

	.  reduce 126


state 45
	const_init : '=' . literal  (23)

	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	.  error

	literal  goto 68


state 46
	const_iden_list : IDEN const_init .  (22)

	.  reduce 22


state 47
	extdef_no_func : CONST type const_iden_list ';' .  (12)

	.  reduce 12


state 48
	const_iden_list : const_iden_list ',' . IDEN const_init  (21)

	IDEN  shift 69
	.  error


state 49
	extdef_no_func : type IDEN '(' para_in . ')' ';'  (9)
	first_func_def : type IDEN '(' para_in . ')' compound  (107)

	')'  shift 70
	.  error


state 50
	init : '=' $$2 . expr  (121)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 76
	var  goto 77


state 51
	index_dec : '[' INT_LIT . ']'  (131)

	']'  shift 78
	.  error


state 52
	array_init : '=' . '{' exprs_comma_no_invoke_x '}'  (122)

	'{'  shift 79
	.  error


state 53
	iden_list_init : IDEN indexs_dec array_init .  (19)

	.  reduce 19


state 54
	indexs_dec : indexs_dec index_dec .  (129)

	.  reduce 129


state 55
	iden_list_init : iden_list_init ',' IDEN .  (13)
	iden_list_init : iden_list_init ',' IDEN . init  (14)
	iden_list_init : iden_list_init ',' IDEN . indexs_dec array_init  (15)
	iden_list_init : iden_list_init ',' IDEN . indexs_dec  (16)

	'='  shift 28
	'['  shift 29
	';'  reduce 13
	','  reduce 13

	init  goto 80
	indexs_dec  goto 81
	index_dec  goto 32


state 56
	extdef : VOID IDEN '(' . para_in ')' ';'  (27)
	func_def : VOID IDEN '(' . para_in ')' compound  (110)
	para_in : .  (123)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 123

	type  goto 41
	para_in  goto 82
	paras  goto 43
	para  goto 44


state 57
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)
	extdef : CONST type const_iden_list . ';'  (30)

	';'  shift 83
	','  shift 48
	.  error


state 58
	extdef : type IDEN '(' . para_in ')' ';'  (26)
	func_def : type IDEN '(' . para_in ')' compound  (109)
	para_in : .  (123)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 123

	type  goto 41
	para_in  goto 84
	paras  goto 43
	para  goto 44


state 59
	extdef : type iden_list_init ';' .  (29)

	.  reduce 29


state 60
	para : type IDEN . indexs_dec  (127)
	para : type IDEN .  (128)

	'['  shift 29
	')'  reduce 128
	','  reduce 128

	indexs_dec  goto 85
	index_dec  goto 32


state 61
	extdef_no_func : VOID IDEN '(' para_in ')' . ';'  (10)
	first_func_def : VOID IDEN '(' para_in ')' . compound  (108)

	';'  shift 86
	'{'  shift 87
	.  error

	compound  goto 88


state 62
	paras : paras ',' . para  (125)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 41
	para  goto 89


state 63
	literal : STRING_LIT .  (143)

	.  reduce 143


state 64
	literal : INT_LIT .  (140)

	.  reduce 140


state 65
	literal : BOOL_LIT .  (142)

	.  reduce 142


state 66
	literal : CHAR_LIT .  (139)

	.  reduce 139


state 67
	literal : DOUBLE_LIT .  (141)

	.  reduce 141


state 68
	const_init : '=' literal .  (23)

	.  reduce 23


state 69
	const_iden_list : const_iden_list ',' IDEN . const_init  (21)

	'='  shift 45
	.  error

	const_init  goto 90


state 70
	extdef_no_func : type IDEN '(' para_in ')' . ';'  (9)
	first_func_def : type IDEN '(' para_in ')' . compound  (107)

	';'  shift 91
	'{'  shift 87
	.  error

	compound  goto 92


state 71
	var : IDEN . indexs  (5)
	var : IDEN .  (6)
	expr : IDEN . '(' exprs_comma_x ')'  (43)

	'('  shift 93
	'['  shift 94
	PLUSPLUS  reduce 6
	MINUSMINUS  reduce 6
	ANDAND  reduce 6
	OROR  reduce 6
	GE  reduce 6
	LE  reduce 6
	EQUAL  reduce 6
	NOTEQUAL  reduce 6
	'>'  reduce 6
	'<'  reduce 6
	'+'  reduce 6
	'-'  reduce 6
	'*'  reduce 6
	'/'  reduce 6
	'%'  reduce 6
	')'  reduce 6
	';'  reduce 6
	','  reduce 6
	']'  reduce 6

	indexs  goto 95
	index  goto 96


state 72
	expr : NOT . expr  (55)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 97
	var  goto 77


state 73
	expr : '-' . expr  (58)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 98
	var  goto 77


state 74
	expr : '(' . expr ')'  (59)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 99
	var  goto 77


state 75
	expr : literal .  (39)

	.  reduce 39


state 76
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	init : '=' $$2 expr .  (121)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	';'  reduce 121
	','  reduce 121


state 77
	expr : var .  (40)
	expr : var . PLUSPLUS  (41)
	expr : var . MINUSMINUS  (42)

	PLUSPLUS  shift 113
	MINUSMINUS  shift 114
	ANDAND  reduce 40
	OROR  reduce 40
	GE  reduce 40
	LE  reduce 40
	EQUAL  reduce 40
	NOTEQUAL  reduce 40
	'>'  reduce 40
	'<'  reduce 40
	'+'  reduce 40
	'-'  reduce 40
	'*'  reduce 40
	'/'  reduce 40
	'%'  reduce 40
	')'  reduce 40
	';'  reduce 40
	','  reduce 40
	']'  reduce 40


state 78
	index_dec : '[' INT_LIT ']' .  (131)

	.  reduce 131


state 79
	array_init : '=' '{' . exprs_comma_no_invoke_x '}'  (122)
	exprs_comma_no_invoke_x : .  (116)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	'}'  reduce 116

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 121
	exprs_comma_no_invoke_x  goto 122
	exprs_comma_no_invoke  goto 123


state 80
	iden_list_init : iden_list_init ',' IDEN init .  (14)

	.  reduce 14


state 81
	iden_list_init : iden_list_init ',' IDEN indexs_dec . array_init  (15)
	iden_list_init : iden_list_init ',' IDEN indexs_dec .  (16)
	indexs_dec : indexs_dec . index_dec  (129)

	'='  shift 52
	'['  shift 29
	';'  reduce 16
	','  reduce 16

	array_init  goto 124
	index_dec  goto 54


state 82
	extdef : VOID IDEN '(' para_in . ')' ';'  (27)
	func_def : VOID IDEN '(' para_in . ')' compound  (110)

	')'  shift 125
	.  error


state 83
	extdef : CONST type const_iden_list ';' .  (30)

	.  reduce 30


state 84
	extdef : type IDEN '(' para_in . ')' ';'  (26)
	func_def : type IDEN '(' para_in . ')' compound  (109)

	')'  shift 126
	.  error


state 85
	para : type IDEN indexs_dec .  (127)
	indexs_dec : indexs_dec . index_dec  (129)

	'['  shift 29
	')'  reduce 127
	','  reduce 127

	index_dec  goto 54


state 86
	extdef_no_func : VOID IDEN '(' para_in ')' ';' .  (10)

	.  reduce 10


state 87
	compound : '{' . decs_x stmts_x '}'  (111)
	decs_x : .  (31)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 127
	IDEN  reduce 31
	SWITCH  reduce 31
	IF  reduce 31
	FOR  reduce 31
	WHILE  reduce 31
	DO  reduce 31
	RETURN  reduce 31
	CONTINUE  reduce 31
	BREAK  reduce 31
	DIGITAL_WRITE  reduce 31
	DELAY  reduce 31
	'}'  reduce 31

	type  goto 128
	decs_x  goto 129
	decs  goto 130
	dec  goto 131


state 88
	first_func_def : VOID IDEN '(' para_in ')' compound .  (108)

	.  reduce 108


state 89
	paras : paras ',' para .  (125)

	.  reduce 125


state 90
	const_iden_list : const_iden_list ',' IDEN const_init .  (21)

	.  reduce 21


state 91
	extdef_no_func : type IDEN '(' para_in ')' ';' .  (9)

	.  reduce 9


state 92
	first_func_def : type IDEN '(' para_in ')' compound .  (107)

	.  reduce 107


state 93
	expr : IDEN '(' . exprs_comma_x ')'  (43)
	exprs_comma_x : .  (112)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	')'  reduce 112

	literal  goto 75
	expr  goto 132
	var  goto 77
	exprs_comma_x  goto 133
	exprs_comma  goto 134


state 94
	index : '[' . expr ']'  (134)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 135
	var  goto 77


state 95
	var : IDEN indexs .  (5)
	indexs : indexs . index  (132)

	'['  shift 94
	PLUSPLUS  reduce 5
	MINUSMINUS  reduce 5
	ANDAND  reduce 5
	OROR  reduce 5
	GE  reduce 5
	LE  reduce 5
	EQUAL  reduce 5
	NOTEQUAL  reduce 5
	'>'  reduce 5
	'<'  reduce 5
	'+'  reduce 5
	'-'  reduce 5
	'*'  reduce 5
	'/'  reduce 5
	'%'  reduce 5
	')'  reduce 5
	';'  reduce 5
	','  reduce 5
	'='  reduce 5
	'}'  reduce 5
	']'  reduce 5

	index  goto 136


state 96
	indexs : index .  (133)

	.  reduce 133


state 97
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : NOT expr .  (55)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 55
	OROR  reduce 55
	')'  reduce 55
	';'  reduce 55
	','  reduce 55
	']'  reduce 55


state 98
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : '-' expr .  (58)

	.  reduce 58


state 99
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : '(' expr . ')'  (59)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  shift 137
	.  error


state 100
	expr : expr ANDAND . expr  (56)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 138
	var  goto 77


state 101
	expr : expr OROR . expr  (57)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 139
	var  goto 77


state 102
	expr : expr GE . expr  (51)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 140
	var  goto 77


state 103
	expr : expr LE . expr  (52)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 141
	var  goto 77


state 104
	expr : expr EQUAL . expr  (53)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 142
	var  goto 77


state 105
	expr : expr NOTEQUAL . expr  (54)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 143
	var  goto 77


state 106
	expr : expr '>' . expr  (49)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 144
	var  goto 77


state 107
	expr : expr '<' . expr  (50)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 145
	var  goto 77


state 108
	expr : expr '+' . expr  (44)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 146
	var  goto 77


state 109
	expr : expr '-' . expr  (45)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 147
	var  goto 77


state 110
	expr : expr '*' . expr  (46)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 148
	var  goto 77


state 111
	expr : expr '/' . expr  (47)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 149
	var  goto 77


state 112
	expr : expr '%' . expr  (48)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 150
	var  goto 77


state 113
	expr : var PLUSPLUS .  (41)

	.  reduce 41


state 114
	expr : var MINUSMINUS .  (42)

	.  reduce 42


state 115
	var : IDEN . indexs  (5)
	var : IDEN .  (6)

	'['  shift 94
	PLUSPLUS  reduce 6
	MINUSMINUS  reduce 6
	ANDAND  reduce 6
	OROR  reduce 6
	GE  reduce 6
	LE  reduce 6
	EQUAL  reduce 6
	NOTEQUAL  reduce 6
	'>'  reduce 6
	'<'  reduce 6
	'+'  reduce 6
	'-'  reduce 6
	'*'  reduce 6
	'/'  reduce 6
	'%'  reduce 6
	')'  reduce 6
	','  reduce 6
	'}'  reduce 6

	indexs  goto 95
	index  goto 96


state 116
	expr_no_invoke : NOT . expr_no_invoke  (75)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 151


state 117
	expr_no_invoke : '-' . expr_no_invoke  (78)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 152


state 118
	expr_no_invoke : '(' . expr_no_invoke ')'  (79)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 153


state 119
	expr_no_invoke : literal .  (60)

	.  reduce 60


state 120
	expr_no_invoke : var .  (61)
	expr_no_invoke : var . PLUSPLUS  (62)
	expr_no_invoke : var . MINUSMINUS  (63)

	PLUSPLUS  shift 154
	MINUSMINUS  shift 155
	ANDAND  reduce 61
	OROR  reduce 61
	GE  reduce 61
	LE  reduce 61
	EQUAL  reduce 61
	NOTEQUAL  reduce 61
	'>'  reduce 61
	'<'  reduce 61
	'+'  reduce 61
	'-'  reduce 61
	'*'  reduce 61
	'/'  reduce 61
	'%'  reduce 61
	')'  reduce 61
	','  reduce 61
	'}'  reduce 61


state 121
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	exprs_comma_no_invoke : expr_no_invoke .  (119)

	ANDAND  shift 156
	OROR  shift 157
	GE  shift 158
	LE  shift 159
	EQUAL  shift 160
	NOTEQUAL  shift 161
	'>'  shift 162
	'<'  shift 163
	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	','  reduce 119
	'}'  reduce 119


state 122
	array_init : '=' '{' exprs_comma_no_invoke_x . '}'  (122)

	'}'  shift 169
	.  error


state 123
	exprs_comma_no_invoke_x : exprs_comma_no_invoke .  (117)
	exprs_comma_no_invoke : exprs_comma_no_invoke . ',' expr_no_invoke  (118)

	','  shift 170
	'}'  reduce 117


state 124
	iden_list_init : iden_list_init ',' IDEN indexs_dec array_init .  (15)

	.  reduce 15


state 125
	extdef : VOID IDEN '(' para_in ')' . ';'  (27)
	func_def : VOID IDEN '(' para_in ')' . compound  (110)

	';'  shift 171
	'{'  shift 87
	.  error

	compound  goto 172


state 126
	extdef : type IDEN '(' para_in ')' . ';'  (26)
	func_def : type IDEN '(' para_in ')' . compound  (109)

	';'  shift 173
	'{'  shift 87
	.  error

	compound  goto 174


state 127
	dec : CONST . type const_iden_list ';'  (36)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 175


state 128
	dec : type . iden_list_init ';'  (35)

	IDEN  shift 176
	.  error

	iden_list_init  goto 177


state 129
	compound : '{' decs_x . stmts_x '}'  (111)
	stmts_x : .  (80)

	IDEN  shift 178
	SWITCH  shift 179
	IF  shift 180
	FOR  shift 181
	WHILE  shift 182
	DO  shift 183
	RETURN  shift 184
	CONTINUE  shift 185
	BREAK  shift 186
	DIGITAL_WRITE  shift 187
	DELAY  shift 188
	'}'  reduce 80

	var  goto 189
	blink  goto 190
	stmts_x  goto 191
	stmts  goto 192
	stmt  goto 193
	if_stmt  goto 194
	while_stmt  goto 195
	switch_stmt  goto 196
	for_stmt  goto 197


state 130
	decs_x : decs .  (32)
	decs : decs . dec  (33)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 127
	IDEN  reduce 32
	SWITCH  reduce 32
	IF  reduce 32
	FOR  reduce 32
	WHILE  reduce 32
	DO  reduce 32
	RETURN  reduce 32
	CONTINUE  reduce 32
	BREAK  reduce 32
	DIGITAL_WRITE  reduce 32
	DELAY  reduce 32
	'}'  reduce 32

	type  goto 128
	dec  goto 198


state 131
	decs : dec .  (34)

	.  reduce 34


state 132
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	exprs_comma : expr .  (115)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  reduce 115
	','  reduce 115


state 133
	expr : IDEN '(' exprs_comma_x . ')'  (43)

	')'  shift 199
	.  error


state 134
	exprs_comma_x : exprs_comma .  (113)
	exprs_comma : exprs_comma . ',' expr  (114)

	','  shift 200
	')'  reduce 113


state 135
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	index : '[' expr . ']'  (134)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	']'  shift 201
	.  error


state 136
	indexs : indexs index .  (132)

	.  reduce 132


state 137
	expr : '(' expr ')' .  (59)

	.  reduce 59


state 138
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr ANDAND expr .  (56)
	expr : expr . OROR expr  (57)

	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 56
	OROR  reduce 56
	')'  reduce 56
	';'  reduce 56
	','  reduce 56
	']'  reduce 56


state 139
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : expr OROR expr .  (57)

	ANDAND  shift 100
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	OROR  reduce 57
	')'  reduce 57
	';'  reduce 57
	','  reduce 57
	']'  reduce 57


state 140
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr GE expr .  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 51
	OROR  reduce 51
	GE  reduce 51
	LE  reduce 51
	EQUAL  reduce 51
	NOTEQUAL  reduce 51
	'>'  reduce 51
	'<'  reduce 51
	')'  reduce 51
	';'  reduce 51
	','  reduce 51
	']'  reduce 51


state 141
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr LE expr .  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 52
	OROR  reduce 52
	GE  reduce 52
	LE  reduce 52
	EQUAL  reduce 52
	NOTEQUAL  reduce 52
	'>'  reduce 52
	'<'  reduce 52
	')'  reduce 52
	';'  reduce 52
	','  reduce 52
	']'  reduce 52


state 142
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr EQUAL expr .  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 53
	OROR  reduce 53
	GE  reduce 53
	LE  reduce 53
	EQUAL  reduce 53
	NOTEQUAL  reduce 53
	'>'  reduce 53
	'<'  reduce 53
	')'  reduce 53
	';'  reduce 53
	','  reduce 53
	']'  reduce 53


state 143
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr NOTEQUAL expr .  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 54
	OROR  reduce 54
	GE  reduce 54
	LE  reduce 54
	EQUAL  reduce 54
	NOTEQUAL  reduce 54
	'>'  reduce 54
	'<'  reduce 54
	')'  reduce 54
	';'  reduce 54
	','  reduce 54
	']'  reduce 54


state 144
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr '>' expr .  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 49
	OROR  reduce 49
	GE  reduce 49
	LE  reduce 49
	EQUAL  reduce 49
	NOTEQUAL  reduce 49
	'>'  reduce 49
	'<'  reduce 49
	')'  reduce 49
	';'  reduce 49
	','  reduce 49
	']'  reduce 49


state 145
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr '<' expr .  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 50
	OROR  reduce 50
	GE  reduce 50
	LE  reduce 50
	EQUAL  reduce 50
	NOTEQUAL  reduce 50
	'>'  reduce 50
	'<'  reduce 50
	')'  reduce 50
	';'  reduce 50
	','  reduce 50
	']'  reduce 50


state 146
	expr : expr . '+' expr  (44)
	expr : expr '+' expr .  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 44
	OROR  reduce 44
	GE  reduce 44
	LE  reduce 44
	EQUAL  reduce 44
	NOTEQUAL  reduce 44
	'>'  reduce 44
	'<'  reduce 44
	'+'  reduce 44
	'-'  reduce 44
	')'  reduce 44
	';'  reduce 44
	','  reduce 44
	']'  reduce 44


state 147
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr '-' expr .  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	ANDAND  reduce 45
	OROR  reduce 45
	GE  reduce 45
	LE  reduce 45
	EQUAL  reduce 45
	NOTEQUAL  reduce 45
	'>'  reduce 45
	'<'  reduce 45
	'+'  reduce 45
	'-'  reduce 45
	')'  reduce 45
	';'  reduce 45
	','  reduce 45
	']'  reduce 45


state 148
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr '*' expr .  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 46


state 149
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr '/' expr .  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 47


state 150
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr '%' expr .  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 48


state 151
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : NOT expr_no_invoke .  (75)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	GE  shift 158
	LE  shift 159
	EQUAL  shift 160
	NOTEQUAL  shift 161
	'>'  shift 162
	'<'  shift 163
	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 75
	OROR  reduce 75
	')'  reduce 75
	','  reduce 75
	'}'  reduce 75


state 152
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : '-' expr_no_invoke .  (78)

	.  reduce 78


state 153
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : '(' expr_no_invoke . ')'  (79)

	ANDAND  shift 156
	OROR  shift 157
	GE  shift 158
	LE  shift 159
	EQUAL  shift 160
	NOTEQUAL  shift 161
	'>'  shift 162
	'<'  shift 163
	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	')'  shift 202
	.  error


state 154
	expr_no_invoke : var PLUSPLUS .  (62)

	.  reduce 62


state 155
	expr_no_invoke : var MINUSMINUS .  (63)

	.  reduce 63


state 156
	expr_no_invoke : expr_no_invoke ANDAND . expr_no_invoke  (76)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 203


state 157
	expr_no_invoke : expr_no_invoke OROR . expr_no_invoke  (77)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 204


state 158
	expr_no_invoke : expr_no_invoke GE . expr_no_invoke  (71)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 205


state 159
	expr_no_invoke : expr_no_invoke LE . expr_no_invoke  (72)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 206


state 160
	expr_no_invoke : expr_no_invoke EQUAL . expr_no_invoke  (73)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 207


state 161
	expr_no_invoke : expr_no_invoke NOTEQUAL . expr_no_invoke  (74)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 208


state 162
	expr_no_invoke : expr_no_invoke '>' . expr_no_invoke  (69)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 209


state 163
	expr_no_invoke : expr_no_invoke '<' . expr_no_invoke  (70)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 210


state 164
	expr_no_invoke : expr_no_invoke '+' . expr_no_invoke  (64)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 211


state 165
	expr_no_invoke : expr_no_invoke '-' . expr_no_invoke  (65)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 212


state 166
	expr_no_invoke : expr_no_invoke '*' . expr_no_invoke  (66)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 213


state 167
	expr_no_invoke : expr_no_invoke '/' . expr_no_invoke  (67)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 214


state 168
	expr_no_invoke : expr_no_invoke '%' . expr_no_invoke  (68)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 215


state 169
	array_init : '=' '{' exprs_comma_no_invoke_x '}' .  (122)

	.  reduce 122


state 170
	exprs_comma_no_invoke : exprs_comma_no_invoke ',' . expr_no_invoke  (118)

	IDEN  shift 115
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 116
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	var  goto 120
	expr_no_invoke  goto 216


state 171
	extdef : VOID IDEN '(' para_in ')' ';' .  (27)

	.  reduce 27


state 172
	func_def : VOID IDEN '(' para_in ')' compound .  (110)

	.  reduce 110


state 173
	extdef : type IDEN '(' para_in ')' ';' .  (26)

	.  reduce 26


state 174
	func_def : type IDEN '(' para_in ')' compound .  (109)

	.  reduce 109


state 175
	dec : CONST type . const_iden_list ';'  (36)

	IDEN  shift 25
	.  error

	const_iden_list  goto 217


state 176
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)

	'='  shift 28
	'['  shift 29
	';'  reduce 18
	','  reduce 18

	init  goto 30
	indexs_dec  goto 31
	index_dec  goto 32


state 177
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)
	dec : type iden_list_init . ';'  (35)

	';'  shift 218
	','  shift 34
	.  error


state 178
	var : IDEN . indexs  (5)
	var : IDEN .  (6)
	stmt : IDEN . '(' exprs_comma_x ')' ';'  (91)

	'('  shift 219
	'['  shift 94
	'='  reduce 6

	indexs  goto 95
	index  goto 96


state 179
	switch_stmt : SWITCH . '(' IDEN ')' '{' cases default_x '}'  (100)

	'('  shift 220
	.  error


state 180
	if_stmt : IF . '(' expr ')' compound ELSE compound  (95)
	if_stmt : IF . '(' expr ')' compound  (96)

	'('  shift 221
	.  error


state 181
	for_stmt : FOR . '(' expr_x ';' expr_x ';' expr_x ')' compound  (99)

	'('  shift 222
	.  error


state 182
	while_stmt : WHILE . '(' expr ')' compound  (97)

	'('  shift 223
	.  error


state 183
	while_stmt : DO . compound WHILE '(' expr ')' ';'  (98)

	'{'  shift 87
	.  error

	compound  goto 224


state 184
	stmt : RETURN . expr ';'  (92)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 225
	var  goto 77


state 185
	stmt : CONTINUE . ';'  (94)

	';'  shift 226
	.  error


state 186
	stmt : BREAK . ';'  (93)

	';'  shift 227
	.  error


state 187
	blink : DIGITAL_WRITE . '(' $$3 expr ',' lowhigh ')' ';'  (145)

	'('  shift 228
	.  error


state 188
	blink : DELAY . '(' $$4 expr ')' ';'  (147)

	'('  shift 229
	.  error


state 189
	stmt : var . '=' $$1 expr ';'  (85)

	'='  shift 230
	.  error


state 190
	stmt : blink .  (86)

	.  reduce 86


state 191
	compound : '{' decs_x stmts_x . '}'  (111)

	'}'  shift 231
	.  error


state 192
	stmts_x : stmts .  (81)
	stmts : stmts . stmt  (82)

	IDEN  shift 178
	SWITCH  shift 179
	IF  shift 180
	FOR  shift 181
	WHILE  shift 182
	DO  shift 183
	RETURN  shift 184
	CONTINUE  shift 185
	BREAK  shift 186
	DIGITAL_WRITE  shift 187
	DELAY  shift 188
	CASE  reduce 81
	DEFAULT  reduce 81
	'}'  reduce 81

	var  goto 189
	blink  goto 190
	stmt  goto 232
	if_stmt  goto 194
	while_stmt  goto 195
	switch_stmt  goto 196
	for_stmt  goto 197


state 193
	stmts : stmt .  (83)

	.  reduce 83


state 194
	stmt : if_stmt .  (87)

	.  reduce 87


state 195
	stmt : while_stmt .  (88)

	.  reduce 88


state 196
	stmt : switch_stmt .  (89)

	.  reduce 89


state 197
	stmt : for_stmt .  (90)

	.  reduce 90


state 198
	decs : decs dec .  (33)

	.  reduce 33


state 199
	expr : IDEN '(' exprs_comma_x ')' .  (43)

	.  reduce 43


state 200
	exprs_comma : exprs_comma ',' . expr  (114)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 233
	var  goto 77


state 201
	index : '[' expr ']' .  (134)

	.  reduce 134


state 202
	expr_no_invoke : '(' expr_no_invoke ')' .  (79)

	.  reduce 79


state 203
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke ANDAND expr_no_invoke .  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	GE  shift 158
	LE  shift 159
	EQUAL  shift 160
	NOTEQUAL  shift 161
	'>'  shift 162
	'<'  shift 163
	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 76
	OROR  reduce 76
	')'  reduce 76
	','  reduce 76
	'}'  reduce 76


state 204
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : expr_no_invoke OROR expr_no_invoke .  (77)

	ANDAND  shift 156
	GE  shift 158
	LE  shift 159
	EQUAL  shift 160
	NOTEQUAL  shift 161
	'>'  shift 162
	'<'  shift 163
	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	OROR  reduce 77
	')'  reduce 77
	','  reduce 77
	'}'  reduce 77


state 205
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke GE expr_no_invoke .  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 71
	OROR  reduce 71
	GE  reduce 71
	LE  reduce 71
	EQUAL  reduce 71
	NOTEQUAL  reduce 71
	'>'  reduce 71
	'<'  reduce 71
	')'  reduce 71
	','  reduce 71
	'}'  reduce 71


state 206
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke LE expr_no_invoke .  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 72
	OROR  reduce 72
	GE  reduce 72
	LE  reduce 72
	EQUAL  reduce 72
	NOTEQUAL  reduce 72
	'>'  reduce 72
	'<'  reduce 72
	')'  reduce 72
	','  reduce 72
	'}'  reduce 72


state 207
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke EQUAL expr_no_invoke .  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 73
	OROR  reduce 73
	GE  reduce 73
	LE  reduce 73
	EQUAL  reduce 73
	NOTEQUAL  reduce 73
	'>'  reduce 73
	'<'  reduce 73
	')'  reduce 73
	','  reduce 73
	'}'  reduce 73


state 208
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke NOTEQUAL expr_no_invoke .  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 74
	OROR  reduce 74
	GE  reduce 74
	LE  reduce 74
	EQUAL  reduce 74
	NOTEQUAL  reduce 74
	'>'  reduce 74
	'<'  reduce 74
	')'  reduce 74
	','  reduce 74
	'}'  reduce 74


state 209
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke '>' expr_no_invoke .  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 69
	OROR  reduce 69
	GE  reduce 69
	LE  reduce 69
	EQUAL  reduce 69
	NOTEQUAL  reduce 69
	'>'  reduce 69
	'<'  reduce 69
	')'  reduce 69
	','  reduce 69
	'}'  reduce 69


state 210
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke '<' expr_no_invoke .  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 70
	OROR  reduce 70
	GE  reduce 70
	LE  reduce 70
	EQUAL  reduce 70
	NOTEQUAL  reduce 70
	'>'  reduce 70
	'<'  reduce 70
	')'  reduce 70
	','  reduce 70
	'}'  reduce 70


state 211
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke '+' expr_no_invoke .  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 64
	OROR  reduce 64
	GE  reduce 64
	LE  reduce 64
	EQUAL  reduce 64
	NOTEQUAL  reduce 64
	'>'  reduce 64
	'<'  reduce 64
	'+'  reduce 64
	'-'  reduce 64
	')'  reduce 64
	','  reduce 64
	'}'  reduce 64


state 212
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke '-' expr_no_invoke .  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	ANDAND  reduce 65
	OROR  reduce 65
	GE  reduce 65
	LE  reduce 65
	EQUAL  reduce 65
	NOTEQUAL  reduce 65
	'>'  reduce 65
	'<'  reduce 65
	'+'  reduce 65
	'-'  reduce 65
	')'  reduce 65
	','  reduce 65
	'}'  reduce 65


state 213
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke '*' expr_no_invoke .  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 66


state 214
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke '/' expr_no_invoke .  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 67


state 215
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke '%' expr_no_invoke .  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 68


state 216
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke .  (118)

	ANDAND  shift 156
	OROR  shift 157
	GE  shift 158
	LE  shift 159
	EQUAL  shift 160
	NOTEQUAL  shift 161
	'>'  shift 162
	'<'  shift 163
	'+'  shift 164
	'-'  shift 165
	'*'  shift 166
	'/'  shift 167
	'%'  shift 168
	','  reduce 118
	'}'  reduce 118


state 217
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)
	dec : CONST type const_iden_list . ';'  (36)

	';'  shift 234
	','  shift 48
	.  error


state 218
	dec : type iden_list_init ';' .  (35)

	.  reduce 35


state 219
	stmt : IDEN '(' . exprs_comma_x ')' ';'  (91)
	exprs_comma_x : .  (112)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	')'  reduce 112

	literal  goto 75
	expr  goto 132
	var  goto 77
	exprs_comma_x  goto 235
	exprs_comma  goto 134


state 220
	switch_stmt : SWITCH '(' . IDEN ')' '{' cases default_x '}'  (100)

	IDEN  shift 236
	.  error


state 221
	if_stmt : IF '(' . expr ')' compound ELSE compound  (95)
	if_stmt : IF '(' . expr ')' compound  (96)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 237
	var  goto 77


state 222
	for_stmt : FOR '(' . expr_x ';' expr_x ';' expr_x ')' compound  (99)
	expr_x : .  (37)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	';'  reduce 37

	literal  goto 75
	expr  goto 238
	var  goto 77
	expr_x  goto 239


state 223
	while_stmt : WHILE '(' . expr ')' compound  (97)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 240
	var  goto 77


state 224
	while_stmt : DO compound . WHILE '(' expr ')' ';'  (98)

	WHILE  shift 241
	.  error


state 225
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	stmt : RETURN expr . ';'  (92)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	';'  shift 242
	.  error


state 226
	stmt : CONTINUE ';' .  (94)

	.  reduce 94


state 227
	stmt : BREAK ';' .  (93)

	.  reduce 93


state 228
	blink : DIGITAL_WRITE '(' . $$3 expr ',' lowhigh ')' ';'  (145)
	$$3 : .  (144)

	.  reduce 144

	$$3  goto 243


state 229
	blink : DELAY '(' . $$4 expr ')' ';'  (147)
	$$4 : .  (146)

	.  reduce 146

	$$4  goto 244


state 230
	stmt : var '=' . $$1 expr ';'  (85)
	$$1 : .  (84)

	.  reduce 84

	$$1  goto 245


state 231
	compound : '{' decs_x stmts_x '}' .  (111)

	.  reduce 111


state 232
	stmts : stmts stmt .  (82)

	.  reduce 82


state 233
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	exprs_comma : exprs_comma ',' expr .  (114)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  reduce 114
	','  reduce 114


state 234
	dec : CONST type const_iden_list ';' .  (36)

	.  reduce 36


state 235
	stmt : IDEN '(' exprs_comma_x . ')' ';'  (91)

	')'  shift 246
	.  error


state 236
	switch_stmt : SWITCH '(' IDEN . ')' '{' cases default_x '}'  (100)

	')'  shift 247
	.  error


state 237
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	if_stmt : IF '(' expr . ')' compound ELSE compound  (95)
	if_stmt : IF '(' expr . ')' compound  (96)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  shift 248
	.  error


state 238
	expr_x : expr .  (38)
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  reduce 38
	';'  reduce 38


state 239
	for_stmt : FOR '(' expr_x . ';' expr_x ';' expr_x ')' compound  (99)

	';'  shift 249
	.  error


state 240
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	while_stmt : WHILE '(' expr . ')' compound  (97)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  shift 250
	.  error


state 241
	while_stmt : DO compound WHILE . '(' expr ')' ';'  (98)

	'('  shift 251
	.  error


state 242
	stmt : RETURN expr ';' .  (92)

	.  reduce 92


state 243
	blink : DIGITAL_WRITE '(' $$3 . expr ',' lowhigh ')' ';'  (145)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 252
	var  goto 77


state 244
	blink : DELAY '(' $$4 . expr ')' ';'  (147)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 253
	var  goto 77


state 245
	stmt : var '=' $$1 . expr ';'  (85)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 254
	var  goto 77


state 246
	stmt : IDEN '(' exprs_comma_x ')' . ';'  (91)

	';'  shift 255
	.  error


state 247
	switch_stmt : SWITCH '(' IDEN ')' . '{' cases default_x '}'  (100)

	'{'  shift 256
	.  error


state 248
	if_stmt : IF '(' expr ')' . compound ELSE compound  (95)
	if_stmt : IF '(' expr ')' . compound  (96)

	'{'  shift 87
	.  error

	compound  goto 257


state 249
	for_stmt : FOR '(' expr_x ';' . expr_x ';' expr_x ')' compound  (99)
	expr_x : .  (37)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	';'  reduce 37

	literal  goto 75
	expr  goto 238
	var  goto 77
	expr_x  goto 258


state 250
	while_stmt : WHILE '(' expr ')' . compound  (97)

	'{'  shift 87
	.  error

	compound  goto 259


state 251
	while_stmt : DO compound WHILE '(' . expr ')' ';'  (98)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	.  error

	literal  goto 75
	expr  goto 260
	var  goto 77


state 252
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	blink : DIGITAL_WRITE '(' $$3 expr . ',' lowhigh ')' ';'  (145)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	','  shift 261
	.  error


state 253
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	blink : DELAY '(' $$4 expr . ')' ';'  (147)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  shift 262
	.  error


state 254
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	stmt : var '=' $$1 expr . ';'  (85)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	';'  shift 263
	.  error


state 255
	stmt : IDEN '(' exprs_comma_x ')' ';' .  (91)

	.  reduce 91


state 256
	switch_stmt : SWITCH '(' IDEN ')' '{' . cases default_x '}'  (100)

	CASE  shift 264
	.  error

	cases  goto 265
	case  goto 266


state 257
	if_stmt : IF '(' expr ')' compound . ELSE compound  (95)
	if_stmt : IF '(' expr ')' compound .  (96)

	ELSE  shift 267
	IDEN  reduce 96
	SWITCH  reduce 96
	CASE  reduce 96
	DEFAULT  reduce 96
	IF  reduce 96
	FOR  reduce 96
	WHILE  reduce 96
	DO  reduce 96
	RETURN  reduce 96
	CONTINUE  reduce 96
	BREAK  reduce 96
	DIGITAL_WRITE  reduce 96
	DELAY  reduce 96
	'}'  reduce 96


state 258
	for_stmt : FOR '(' expr_x ';' expr_x . ';' expr_x ')' compound  (99)

	';'  shift 268
	.  error


state 259
	while_stmt : WHILE '(' expr ')' compound .  (97)

	.  reduce 97


state 260
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	while_stmt : DO compound WHILE '(' expr . ')' ';'  (98)

	ANDAND  shift 100
	OROR  shift 101
	GE  shift 102
	LE  shift 103
	EQUAL  shift 104
	NOTEQUAL  shift 105
	'>'  shift 106
	'<'  shift 107
	'+'  shift 108
	'-'  shift 109
	'*'  shift 110
	'/'  shift 111
	'%'  shift 112
	')'  shift 269
	.  error


state 261
	blink : DIGITAL_WRITE '(' $$3 expr ',' . lowhigh ')' ';'  (145)

	HIGH  shift 270
	LOW  shift 271
	.  error

	lowhigh  goto 272


state 262
	blink : DELAY '(' $$4 expr ')' . ';'  (147)

	';'  shift 273
	.  error


state 263
	stmt : var '=' $$1 expr ';' .  (85)

	.  reduce 85


state 264
	case : CASE . CHAR_LIT ':' stmts_x  (103)
	case : CASE . INT_LIT ':' stmts_x  (104)

	INT_LIT  shift 274
	CHAR_LIT  shift 275
	.  error


state 265
	switch_stmt : SWITCH '(' IDEN ')' '{' cases . default_x '}'  (100)
	cases : cases . case  (101)
	default_x : .  (105)

	CASE  shift 264
	DEFAULT  shift 276
	'}'  reduce 105

	default_x  goto 277
	case  goto 278


state 266
	cases : case .  (102)

	.  reduce 102


state 267
	if_stmt : IF '(' expr ')' compound ELSE . compound  (95)

	'{'  shift 87
	.  error

	compound  goto 279


state 268
	for_stmt : FOR '(' expr_x ';' expr_x ';' . expr_x ')' compound  (99)
	expr_x : .  (37)

	IDEN  shift 71
	STRING_LIT  shift 63
	INT_LIT  shift 64
	BOOL_LIT  shift 65
	NOT  shift 72
	CHAR_LIT  shift 66
	DOUBLE_LIT  shift 67
	'-'  shift 73
	'('  shift 74
	')'  reduce 37

	literal  goto 75
	expr  goto 238
	var  goto 77
	expr_x  goto 280


state 269
	while_stmt : DO compound WHILE '(' expr ')' . ';'  (98)

	';'  shift 281
	.  error


state 270
	lowhigh : HIGH .  (149)

	.  reduce 149


state 271
	lowhigh : LOW .  (148)

	.  reduce 148


state 272
	blink : DIGITAL_WRITE '(' $$3 expr ',' lowhigh . ')' ';'  (145)

	')'  shift 282
	.  error


state 273
	blink : DELAY '(' $$4 expr ')' ';' .  (147)

	.  reduce 147


state 274
	case : CASE INT_LIT . ':' stmts_x  (104)

	':'  shift 283
	.  error


state 275
	case : CASE CHAR_LIT . ':' stmts_x  (103)

	':'  shift 284
	.  error


state 276
	default_x : DEFAULT . ':' stmts_x  (106)

	':'  shift 285
	.  error


state 277
	switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x . '}'  (100)

	'}'  shift 286
	.  error


state 278
	cases : cases case .  (101)

	.  reduce 101


state 279
	if_stmt : IF '(' expr ')' compound ELSE compound .  (95)

	.  reduce 95


state 280
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x . ')' compound  (99)

	')'  shift 287
	.  error


state 281
	while_stmt : DO compound WHILE '(' expr ')' ';' .  (98)

	.  reduce 98


state 282
	blink : DIGITAL_WRITE '(' $$3 expr ',' lowhigh ')' . ';'  (145)

	';'  shift 288
	.  error


state 283
	case : CASE INT_LIT ':' . stmts_x  (104)
	stmts_x : .  (80)

	IDEN  shift 178
	SWITCH  shift 179
	IF  shift 180
	FOR  shift 181
	WHILE  shift 182
	DO  shift 183
	RETURN  shift 184
	CONTINUE  shift 185
	BREAK  shift 186
	DIGITAL_WRITE  shift 187
	DELAY  shift 188
	CASE  reduce 80
	DEFAULT  reduce 80
	'}'  reduce 80

	var  goto 189
	blink  goto 190
	stmts_x  goto 289
	stmts  goto 192
	stmt  goto 193
	if_stmt  goto 194
	while_stmt  goto 195
	switch_stmt  goto 196
	for_stmt  goto 197


state 284
	case : CASE CHAR_LIT ':' . stmts_x  (103)
	stmts_x : .  (80)

	IDEN  shift 178
	SWITCH  shift 179
	IF  shift 180
	FOR  shift 181
	WHILE  shift 182
	DO  shift 183
	RETURN  shift 184
	CONTINUE  shift 185
	BREAK  shift 186
	DIGITAL_WRITE  shift 187
	DELAY  shift 188
	CASE  reduce 80
	DEFAULT  reduce 80
	'}'  reduce 80

	var  goto 189
	blink  goto 190
	stmts_x  goto 290
	stmts  goto 192
	stmt  goto 193
	if_stmt  goto 194
	while_stmt  goto 195
	switch_stmt  goto 196
	for_stmt  goto 197


state 285
	default_x : DEFAULT ':' . stmts_x  (106)
	stmts_x : .  (80)

	IDEN  shift 178
	SWITCH  shift 179
	IF  shift 180
	FOR  shift 181
	WHILE  shift 182
	DO  shift 183
	RETURN  shift 184
	CONTINUE  shift 185
	BREAK  shift 186
	DIGITAL_WRITE  shift 187
	DELAY  shift 188
	'}'  reduce 80

	var  goto 189
	blink  goto 190
	stmts_x  goto 291
	stmts  goto 192
	stmt  goto 193
	if_stmt  goto 194
	while_stmt  goto 195
	switch_stmt  goto 196
	for_stmt  goto 197


state 286
	switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}' .  (100)

	.  reduce 100


state 287
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' . compound  (99)

	'{'  shift 87
	.  error

	compound  goto 292


state 288
	blink : DIGITAL_WRITE '(' $$3 expr ',' lowhigh ')' ';' .  (145)

	.  reduce 145


state 289
	case : CASE INT_LIT ':' stmts_x .  (104)

	.  reduce 104


state 290
	case : CASE CHAR_LIT ':' stmts_x .  (103)

	.  reduce 103


state 291
	default_x : DEFAULT ':' stmts_x .  (106)

	.  reduce 106


state 292
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' compound .  (99)

	.  reduce 99


60 terminals, 50 nonterminals
150 grammar rules, 293 states
